// Code generated by gen.go; DO NOT EDIT.

package githubv4

// Input represents one of the Input structs:
//
// AbortQueuedMigrationsInput, AbortRepositoryMigrationInput, AcceptEnterpriseAdministratorInvitationInput, AcceptTopicSuggestionInput, AddAssigneesToAssignableInput, AddCommentInput, AddDiscussionCommentInput, AddDiscussionPollVoteInput, AddEnterpriseOrganizationMemberInput, AddEnterpriseSupportEntitlementInput, AddLabelsToLabelableInput, AddProjectCardInput, AddProjectColumnInput, AddProjectV2DraftIssueInput, AddProjectV2ItemByIdInput, AddPullRequestReviewCommentInput, AddPullRequestReviewInput, AddPullRequestReviewThreadInput, AddPullRequestReviewThreadReplyInput, AddReactionInput, AddStarInput, AddUpvoteInput, AddVerifiableDomainInput, ApproveDeploymentsInput, ApproveVerifiableDomainInput, ArchiveProjectV2ItemInput, ArchiveRepositoryInput, AuditLogOrder, BranchNamePatternParametersInput, BulkSponsorship, CancelEnterpriseAdminInvitationInput, CancelSponsorshipInput, ChangeUserStatusInput, CheckAnnotationData, CheckAnnotationRange, CheckRunAction, CheckRunFilter, CheckRunOutput, CheckRunOutputImage, CheckSuiteAutoTriggerPreference, CheckSuiteFilter, ClearLabelsFromLabelableInput, ClearProjectV2ItemFieldValueInput, CloneProjectInput, CloneTemplateRepositoryInput, CloseDiscussionInput, CloseIssueInput, ClosePullRequestInput, CommitAuthor, CommitAuthorEmailPatternParametersInput, CommitContributionOrder, CommitMessage, CommitMessagePatternParametersInput, CommittableBranch, CommitterEmailPatternParametersInput, ContributionOrder, ConvertProjectCardNoteToIssueInput, ConvertPullRequestToDraftInput, CopyProjectV2Input, CreateAttributionInvitationInput, CreateBranchProtectionRuleInput, CreateCheckRunInput, CreateCheckSuiteInput, CreateCommitOnBranchInput, CreateDeploymentInput, CreateDeploymentStatusInput, CreateDiscussionInput, CreateEnterpriseOrganizationInput, CreateEnvironmentInput, CreateIpAllowListEntryInput, CreateIssueInput, CreateLabelInput, CreateLinkedBranchInput, CreateMigrationSourceInput, CreateProjectInput, CreateProjectV2FieldInput, CreateProjectV2Input, CreatePullRequestInput, CreateRefInput, CreateRepositoryInput, CreateRepositoryRulesetInput, CreateSponsorsListingInput, CreateSponsorsTierInput, CreateSponsorshipInput, CreateSponsorshipsInput, CreateTeamDiscussionCommentInput, CreateTeamDiscussionInput, CreateUserListInput, DeclineTopicSuggestionInput, DeleteBranchProtectionRuleInput, DeleteDeploymentInput, DeleteDiscussionCommentInput, DeleteDiscussionInput, DeleteEnvironmentInput, DeleteIpAllowListEntryInput, DeleteIssueCommentInput, DeleteIssueInput, DeleteLabelInput, DeleteLinkedBranchInput, DeletePackageVersionInput, DeleteProjectCardInput, DeleteProjectColumnInput, DeleteProjectInput, DeleteProjectV2FieldInput, DeleteProjectV2Input, DeleteProjectV2ItemInput, DeleteProjectV2WorkflowInput, DeletePullRequestReviewCommentInput, DeletePullRequestReviewInput, DeleteRefInput, DeleteRepositoryRulesetInput, DeleteTeamDiscussionCommentInput, DeleteTeamDiscussionInput, DeleteUserListInput, DeleteVerifiableDomainInput, DeploymentOrder, DequeuePullRequestInput, DisablePullRequestAutoMergeInput, DiscussionOrder, DiscussionPollOptionOrder, DismissPullRequestReviewInput, DismissRepositoryVulnerabilityAlertInput, DraftPullRequestReviewComment, DraftPullRequestReviewThread, EnablePullRequestAutoMergeInput, EnqueuePullRequestInput, EnterpriseAdministratorInvitationOrder, EnterpriseMemberOrder, EnterpriseOrder, EnterpriseServerInstallationOrder, EnterpriseServerUserAccountEmailOrder, EnterpriseServerUserAccountOrder, EnterpriseServerUserAccountsUploadOrder, Environments, FileAddition, FileChanges, FileDeletion, FileExtensionRestrictionParametersInput, FilePathRestrictionParametersInput, FollowOrganizationInput, FollowUserInput, GistOrder, GrantEnterpriseOrganizationsMigratorRoleInput, GrantMigratorRoleInput, ImportProjectInput, InviteEnterpriseAdminInput, IpAllowListEntryOrder, IssueCommentOrder, IssueFilters, IssueOrder, LabelOrder, LanguageOrder, LinkProjectV2ToRepositoryInput, LinkProjectV2ToTeamInput, LinkRepositoryToProjectInput, LockLockableInput, MannequinOrder, MarkDiscussionCommentAsAnswerInput, MarkFileAsViewedInput, MarkNotificationAsDoneInput, MarkProjectV2AsTemplateInput, MarkPullRequestReadyForReviewInput, MaxFilePathLengthParametersInput, MaxFileSizeParametersInput, MergeBranchInput, MergePullRequestInput, MilestoneOrder, MinimizeCommentInput, MoveProjectCardInput, MoveProjectColumnInput, OrgEnterpriseOwnerOrder, OrganizationOrder, PackageFileOrder, PackageOrder, PackageVersionOrder, PinIssueInput, ProjectCardImport, ProjectColumnImport, ProjectOrder, ProjectV2Collaborator, ProjectV2FieldOrder, ProjectV2FieldValue, ProjectV2Filters, ProjectV2ItemFieldValueOrder, ProjectV2ItemOrder, ProjectV2Order, ProjectV2SingleSelectFieldOptionInput, ProjectV2ViewOrder, ProjectV2WorkflowOrder, PropertyTargetDefinitionInput, PublishSponsorsTierInput, PullRequestOrder, PullRequestParametersInput, ReactionOrder, RefNameConditionTargetInput, RefOrder, RefUpdate, RegenerateEnterpriseIdentityProviderRecoveryCodesInput, RegenerateVerifiableDomainTokenInput, RejectDeploymentsInput, ReleaseOrder, RemoveAssigneesFromAssignableInput, RemoveEnterpriseAdminInput, RemoveEnterpriseIdentityProviderInput, RemoveEnterpriseMemberInput, RemoveEnterpriseOrganizationInput, RemoveEnterpriseSupportEntitlementInput, RemoveLabelsFromLabelableInput, RemoveOutsideCollaboratorInput, RemoveReactionInput, RemoveStarInput, RemoveUpvoteInput, ReopenDiscussionInput, ReopenIssueInput, ReopenPullRequestInput, RepositoryIdConditionTargetInput, RepositoryInvitationOrder, RepositoryMigrationOrder, RepositoryNameConditionTargetInput, RepositoryOrder, RepositoryPropertyConditionTargetInput, RepositoryRuleConditionsInput, RepositoryRuleInput, RepositoryRuleOrder, RepositoryRulesetBypassActorInput, RequestReviewsInput, RequiredDeploymentsParametersInput, RequiredStatusCheckInput, RequiredStatusChecksParametersInput, RerequestCheckSuiteInput, ResolveReviewThreadInput, RetireSponsorsTierInput, RevertPullRequestInput, RevokeEnterpriseOrganizationsMigratorRoleInput, RevokeMigratorRoleInput, RuleParametersInput, SavedReplyOrder, SecurityAdvisoryIdentifierFilter, SecurityAdvisoryOrder, SecurityVulnerabilityOrder, SetEnterpriseIdentityProviderInput, SetOrganizationInteractionLimitInput, SetRepositoryInteractionLimitInput, SetUserInteractionLimitInput, SponsorAndLifetimeValueOrder, SponsorOrder, SponsorableOrder, SponsorsActivityOrder, SponsorsTierOrder, SponsorshipNewsletterOrder, SponsorshipOrder, StarOrder, StartOrganizationMigrationInput, StartRepositoryMigrationInput, StatusCheckConfigurationInput, SubmitPullRequestReviewInput, TagNamePatternParametersInput, TeamDiscussionCommentOrder, TeamDiscussionOrder, TeamMemberOrder, TeamOrder, TeamRepositoryOrder, TransferEnterpriseOrganizationInput, TransferIssueInput, UnarchiveProjectV2ItemInput, UnarchiveRepositoryInput, UnfollowOrganizationInput, UnfollowUserInput, UnlinkProjectV2FromRepositoryInput, UnlinkProjectV2FromTeamInput, UnlinkRepositoryFromProjectInput, UnlockLockableInput, UnmarkDiscussionCommentAsAnswerInput, UnmarkFileAsViewedInput, UnmarkIssueAsDuplicateInput, UnmarkProjectV2AsTemplateInput, UnminimizeCommentInput, UnpinIssueInput, UnresolveReviewThreadInput, UnsubscribeFromNotificationsInput, UpdateBranchProtectionRuleInput, UpdateCheckRunInput, UpdateCheckSuitePreferencesInput, UpdateDiscussionCommentInput, UpdateDiscussionInput, UpdateEnterpriseAdministratorRoleInput, UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput, UpdateEnterpriseDefaultRepositoryPermissionSettingInput, UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput, UpdateEnterpriseMembersCanCreateRepositoriesSettingInput, UpdateEnterpriseMembersCanDeleteIssuesSettingInput, UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput, UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput, UpdateEnterpriseMembersCanMakePurchasesSettingInput, UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput, UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput, UpdateEnterpriseOrganizationProjectsSettingInput, UpdateEnterpriseOwnerOrganizationRoleInput, UpdateEnterpriseProfileInput, UpdateEnterpriseRepositoryProjectsSettingInput, UpdateEnterpriseTeamDiscussionsSettingInput, UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput, UpdateEnvironmentInput, UpdateIpAllowListEnabledSettingInput, UpdateIpAllowListEntryInput, UpdateIpAllowListForInstalledAppsEnabledSettingInput, UpdateIssueCommentInput, UpdateIssueInput, UpdateLabelInput, UpdateNotificationRestrictionSettingInput, UpdateOrganizationAllowPrivateRepositoryForkingSettingInput, UpdateOrganizationWebCommitSignoffSettingInput, UpdateParametersInput, UpdatePatreonSponsorabilityInput, UpdateProjectCardInput, UpdateProjectColumnInput, UpdateProjectInput, UpdateProjectV2CollaboratorsInput, UpdateProjectV2DraftIssueInput, UpdateProjectV2Input, UpdateProjectV2ItemFieldValueInput, UpdateProjectV2ItemPositionInput, UpdatePullRequestBranchInput, UpdatePullRequestInput, UpdatePullRequestReviewCommentInput, UpdatePullRequestReviewInput, UpdateRefInput, UpdateRefsInput, UpdateRepositoryInput, UpdateRepositoryRulesetInput, UpdateRepositoryWebCommitSignoffSettingInput, UpdateSponsorshipPreferencesInput, UpdateSubscriptionInput, UpdateTeamDiscussionCommentInput, UpdateTeamDiscussionInput, UpdateTeamReviewAssignmentInput, UpdateTeamsRepositoryInput, UpdateTopicsInput, UpdateUserListInput, UpdateUserListsForItemInput, UserStatusOrder, VerifiableDomainOrder, VerifyVerifiableDomainInput, WorkflowFileReferenceInput, WorkflowRunOrder, WorkflowsParametersInput.
type Input interface{}

// AbortQueuedMigrationsInput is an autogenerated input type of AbortQueuedMigrations.
type AbortQueuedMigrationsInput struct {
	// The ID of the organization that is running the migrations. (Required.)
	OwnerID ID `json:"ownerId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// AbortRepositoryMigrationInput is an autogenerated input type of AbortRepositoryMigration.
type AbortRepositoryMigrationInput struct {
	// The ID of the migration to be aborted. (Required.)
	MigrationID ID `json:"migrationId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// AcceptEnterpriseAdministratorInvitationInput is an autogenerated input type of AcceptEnterpriseAdministratorInvitation.
type AcceptEnterpriseAdministratorInvitationInput struct {
	// The id of the invitation being accepted. (Required.)
	InvitationID ID `json:"invitationId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// AcceptTopicSuggestionInput is an autogenerated input type of AcceptTopicSuggestion.
type AcceptTopicSuggestionInput struct {

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The Node ID of the repository. **Upcoming Change on 2024-04-01 UTC** **Description:** `repositoryId` will be removed. **Reason:** Suggested topics are no longer supported. (Optional.)
	RepositoryID *ID `json:"repositoryId,omitempty"`
	// The name of the suggested topic. **Upcoming Change on 2024-04-01 UTC** **Description:** `name` will be removed. **Reason:** Suggested topics are no longer supported. (Optional.)
	Name *String `json:"name,omitempty"`
}

// AddAssigneesToAssignableInput is an autogenerated input type of AddAssigneesToAssignable.
type AddAssigneesToAssignableInput struct {
	// The id of the assignable object to add assignees to. (Required.)
	AssignableID ID `json:"assignableId"`
	// The id of users to add as assignees. (Required.)
	AssigneeIDs []ID `json:"assigneeIds"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// AddCommentInput is an autogenerated input type of AddComment.
type AddCommentInput struct {
	// The Node ID of the subject to modify. (Required.)
	SubjectID ID `json:"subjectId"`
	// The contents of the comment. (Required.)
	Body String `json:"body"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// AddDiscussionCommentInput is an autogenerated input type of AddDiscussionComment.
type AddDiscussionCommentInput struct {
	// The Node ID of the discussion to comment on. (Required.)
	DiscussionID ID `json:"discussionId"`
	// The contents of the comment. (Required.)
	Body String `json:"body"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The Node ID of the discussion comment within this discussion to reply to. (Optional.)
	ReplyToID *ID `json:"replyToId,omitempty"`
}

// AddDiscussionPollVoteInput is an autogenerated input type of AddDiscussionPollVote.
type AddDiscussionPollVoteInput struct {
	// The Node ID of the discussion poll option to vote for. (Required.)
	PollOptionID ID `json:"pollOptionId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// AddEnterpriseOrganizationMemberInput is an autogenerated input type of AddEnterpriseOrganizationMember.
type AddEnterpriseOrganizationMemberInput struct {
	// The ID of the enterprise which owns the organization. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The ID of the organization the users will be added to. (Required.)
	OrganizationID ID `json:"organizationId"`
	// The IDs of the enterprise members to add. (Required.)
	UserIDs []ID `json:"userIds"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The role to assign the users in the organization. (Optional.)
	Role *OrganizationMemberRole `json:"role,omitempty"`
}

// AddEnterpriseSupportEntitlementInput is an autogenerated input type of AddEnterpriseSupportEntitlement.
type AddEnterpriseSupportEntitlementInput struct {
	// The ID of the Enterprise which the admin belongs to. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The login of a member who will receive the support entitlement. (Required.)
	Login String `json:"login"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// AddLabelsToLabelableInput is an autogenerated input type of AddLabelsToLabelable.
type AddLabelsToLabelableInput struct {
	// The id of the labelable object to add labels to. (Required.)
	LabelableID ID `json:"labelableId"`
	// The ids of the labels to add. (Required.)
	LabelIDs []ID `json:"labelIds"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// AddProjectCardInput is an autogenerated input type of AddProjectCard.
type AddProjectCardInput struct {
	// The Node ID of the ProjectColumn. (Required.)
	ProjectColumnID ID `json:"projectColumnId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The content of the card. Must be a member of the ProjectCardItem union. (Optional.)
	ContentID *ID `json:"contentId,omitempty"`
	// The note on the card. (Optional.)
	Note *String `json:"note,omitempty"`
}

// AddProjectColumnInput is an autogenerated input type of AddProjectColumn.
type AddProjectColumnInput struct {
	// The Node ID of the project. (Required.)
	ProjectID ID `json:"projectId"`
	// The name of the column. (Required.)
	Name String `json:"name"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// AddProjectV2DraftIssueInput is an autogenerated input type of AddProjectV2DraftIssue.
type AddProjectV2DraftIssueInput struct {
	// The ID of the Project to add the draft issue to. (Required.)
	ProjectID ID `json:"projectId"`
	// The title of the draft issue. A project item can also be created by providing the URL of an Issue or Pull Request if you have access. (Required.)
	Title String `json:"title"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The body of the draft issue. (Optional.)
	Body *String `json:"body,omitempty"`
	// The IDs of the assignees of the draft issue. (Optional.)
	AssigneeIDs *[]ID `json:"assigneeIds,omitempty"`
}

// AddProjectV2ItemByIdInput is an autogenerated input type of AddProjectV2ItemById.
type AddProjectV2ItemByIdInput struct {
	// The ID of the Project to add the item to. (Required.)
	ProjectID ID `json:"projectId"`
	// The id of the Issue or Pull Request to add. (Required.)
	ContentID ID `json:"contentId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// AddPullRequestReviewCommentInput is an autogenerated input type of AddPullRequestReviewComment.
type AddPullRequestReviewCommentInput struct {

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The node ID of the pull request reviewing **Upcoming Change on 2023-10-01 UTC** **Description:** `pullRequestId` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead **Reason:** We are deprecating the addPullRequestReviewComment mutation. (Optional.)
	PullRequestID *ID `json:"pullRequestId,omitempty"`
	// The Node ID of the review to modify. **Upcoming Change on 2023-10-01 UTC** **Description:** `pullRequestReviewId` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead **Reason:** We are deprecating the addPullRequestReviewComment mutation. (Optional.)
	PullRequestReviewID *ID `json:"pullRequestReviewId,omitempty"`
	// The SHA of the commit to comment on. **Upcoming Change on 2023-10-01 UTC** **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead **Reason:** We are deprecating the addPullRequestReviewComment mutation. (Optional.)
	CommitOID *GitObjectID `json:"commitOID,omitempty"`
	// The text of the comment. This field is required **Upcoming Change on 2023-10-01 UTC** **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead **Reason:** We are deprecating the addPullRequestReviewComment mutation. (Optional.)
	Body *String `json:"body,omitempty"`
	// The relative path of the file to comment on. **Upcoming Change on 2023-10-01 UTC** **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead **Reason:** We are deprecating the addPullRequestReviewComment mutation. (Optional.)
	Path *String `json:"path,omitempty"`
	// The line index in the diff to comment on. **Upcoming Change on 2023-10-01 UTC** **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead **Reason:** We are deprecating the addPullRequestReviewComment mutation. (Optional.)
	Position *Int `json:"position,omitempty"`
	// The comment id to reply to. **Upcoming Change on 2023-10-01 UTC** **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead **Reason:** We are deprecating the addPullRequestReviewComment mutation. (Optional.)
	InReplyTo *ID `json:"inReplyTo,omitempty"`
}

// AddPullRequestReviewInput is an autogenerated input type of AddPullRequestReview.
type AddPullRequestReviewInput struct {
	// The Node ID of the pull request to modify. (Required.)
	PullRequestID ID `json:"pullRequestId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The commit OID the review pertains to. (Optional.)
	CommitOID *GitObjectID `json:"commitOID,omitempty"`
	// The contents of the review body comment. (Optional.)
	Body *String `json:"body,omitempty"`
	// The event to perform on the pull request review. (Optional.)
	Event *PullRequestReviewEvent `json:"event,omitempty"`
	// The review line comments. **Upcoming Change on 2023-10-01 UTC** **Description:** `comments` will be removed. use the `threads` argument instead **Reason:** We are deprecating comment fields that use diff-relative positioning. (Optional.)
	Comments *[]*DraftPullRequestReviewComment `json:"comments,omitempty"`
	// The review line comment threads. (Optional.)
	Threads *[]*DraftPullRequestReviewThread `json:"threads,omitempty"`
}

// AddPullRequestReviewThreadInput is an autogenerated input type of AddPullRequestReviewThread.
type AddPullRequestReviewThreadInput struct {
	// Path to the file being commented on. (Required.)
	Path String `json:"path"`
	// Body of the thread's first comment. (Required.)
	Body String `json:"body"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The node ID of the pull request reviewing. (Optional.)
	PullRequestID *ID `json:"pullRequestId,omitempty"`
	// The Node ID of the review to modify. (Optional.)
	PullRequestReviewID *ID `json:"pullRequestReviewId,omitempty"`
	// The line of the blob to which the thread refers, required for line-level threads. The end of the line range for multi-line comments. (Optional.)
	Line *Int `json:"line,omitempty"`
	// The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. (Optional.)
	Side *DiffSide `json:"side,omitempty"`
	// The first line of the range to which the comment refers. (Optional.)
	StartLine *Int `json:"startLine,omitempty"`
	// The side of the diff on which the start line resides. (Optional.)
	StartSide *DiffSide `json:"startSide,omitempty"`
	// The level at which the comments in the corresponding thread are targeted, can be a diff line or a file. (Optional.)
	SubjectType *PullRequestReviewThreadSubjectType `json:"subjectType,omitempty"`
}

// AddPullRequestReviewThreadReplyInput is an autogenerated input type of AddPullRequestReviewThreadReply.
type AddPullRequestReviewThreadReplyInput struct {
	// The Node ID of the thread to which this reply is being written. (Required.)
	PullRequestReviewThreadID ID `json:"pullRequestReviewThreadId"`
	// The text of the reply. (Required.)
	Body String `json:"body"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The Node ID of the pending review to which the reply will belong. (Optional.)
	PullRequestReviewID *ID `json:"pullRequestReviewId,omitempty"`
}

// AddReactionInput is an autogenerated input type of AddReaction.
type AddReactionInput struct {
	// The Node ID of the subject to modify. (Required.)
	SubjectID ID `json:"subjectId"`
	// The name of the emoji to react with. (Required.)
	Content ReactionContent `json:"content"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// AddStarInput is an autogenerated input type of AddStar.
type AddStarInput struct {
	// The Starrable ID to star. (Required.)
	StarrableID ID `json:"starrableId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// AddUpvoteInput is an autogenerated input type of AddUpvote.
type AddUpvoteInput struct {
	// The Node ID of the discussion or comment to upvote. (Required.)
	SubjectID ID `json:"subjectId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// AddVerifiableDomainInput is an autogenerated input type of AddVerifiableDomain.
type AddVerifiableDomainInput struct {
	// The ID of the owner to add the domain to. (Required.)
	OwnerID ID `json:"ownerId"`
	// The URL of the domain. (Required.)
	Domain URI `json:"domain"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// ApproveDeploymentsInput is an autogenerated input type of ApproveDeployments.
type ApproveDeploymentsInput struct {
	// The node ID of the workflow run containing the pending deployments. (Required.)
	WorkflowRunID ID `json:"workflowRunId"`
	// The ids of environments to reject deployments. (Required.)
	EnvironmentIDs []ID `json:"environmentIds"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Optional comment for approving deployments. (Optional.)
	Comment *String `json:"comment,omitempty"`
}

// ApproveVerifiableDomainInput is an autogenerated input type of ApproveVerifiableDomain.
type ApproveVerifiableDomainInput struct {
	// The ID of the verifiable domain to approve. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// ArchiveProjectV2ItemInput is an autogenerated input type of ArchiveProjectV2Item.
type ArchiveProjectV2ItemInput struct {
	// The ID of the Project to archive the item from. (Required.)
	ProjectID ID `json:"projectId"`
	// The ID of the ProjectV2Item to archive. (Required.)
	ItemID ID `json:"itemId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// ArchiveRepositoryInput is an autogenerated input type of ArchiveRepository.
type ArchiveRepositoryInput struct {
	// The ID of the repository to mark as archived. (Required.)
	RepositoryID ID `json:"repositoryId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// AuditLogOrder represents ordering options for Audit Log connections.
type AuditLogOrder struct {

	// The field to order Audit Logs by. (Optional.)
	Field *AuditLogOrderField `json:"field,omitempty"`
	// The ordering direction. (Optional.)
	Direction *OrderDirection `json:"direction,omitempty"`
}

// BranchNamePatternParametersInput represents parameters to be used for the branch_name_pattern rule.
type BranchNamePatternParametersInput struct {
	// The operator to use for matching. (Required.)
	Operator String `json:"operator"`
	// The pattern to match with. (Required.)
	Pattern String `json:"pattern"`

	// How this rule will appear to users. (Optional.)
	Name *String `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches. (Optional.)
	Negate *Boolean `json:"negate,omitempty"`
}

// BulkSponsorship represents information about a sponsorship to make for a user or organization with a GitHub Sponsors profile, as part of sponsoring many users or organizations at once.
type BulkSponsorship struct {
	// The amount to pay to the sponsorable in US dollars. Valid values: 1-12000. (Required.)
	Amount Int `json:"amount"`

	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. (Optional.)
	SponsorableID *ID `json:"sponsorableId,omitempty"`
	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. (Optional.)
	SponsorableLogin *String `json:"sponsorableLogin,omitempty"`
}

// CancelEnterpriseAdminInvitationInput is an autogenerated input type of CancelEnterpriseAdminInvitation.
type CancelEnterpriseAdminInvitationInput struct {
	// The Node ID of the pending enterprise administrator invitation. (Required.)
	InvitationID ID `json:"invitationId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// CancelSponsorshipInput is an autogenerated input type of CancelSponsorship.
type CancelSponsorshipInput struct {

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. (Optional.)
	SponsorID *ID `json:"sponsorId,omitempty"`
	// The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. (Optional.)
	SponsorLogin *String `json:"sponsorLogin,omitempty"`
	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. (Optional.)
	SponsorableID *ID `json:"sponsorableId,omitempty"`
	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. (Optional.)
	SponsorableLogin *String `json:"sponsorableLogin,omitempty"`
}

// ChangeUserStatusInput is an autogenerated input type of ChangeUserStatus.
type ChangeUserStatusInput struct {

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. (Optional.)
	Emoji *String `json:"emoji,omitempty"`
	// A short description of your current status. (Optional.)
	Message *String `json:"message,omitempty"`
	// The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible. (Optional.)
	OrganizationID *ID `json:"organizationId,omitempty"`
	// Whether this status should indicate you are not fully available on GitHub, e.g., you are away. (Optional.)
	LimitedAvailability *Boolean `json:"limitedAvailability,omitempty"`
	// If set, the user status will not be shown after this date. (Optional.)
	ExpiresAt *DateTime `json:"expiresAt,omitempty"`
}

// CheckAnnotationData represents information from a check run analysis to specific lines of code.
type CheckAnnotationData struct {
	// The path of the file to add an annotation to. (Required.)
	Path String `json:"path"`
	// The location of the annotation. (Required.)
	Location CheckAnnotationRange `json:"location"`
	// Represents an annotation's information level. (Required.)
	AnnotationLevel CheckAnnotationLevel `json:"annotationLevel"`
	// A short description of the feedback for these lines of code. (Required.)
	Message String `json:"message"`

	// The title that represents the annotation. (Optional.)
	Title *String `json:"title,omitempty"`
	// Details about this annotation. (Optional.)
	RawDetails *String `json:"rawDetails,omitempty"`
}

// CheckAnnotationRange represents information from a check run analysis to specific lines of code.
type CheckAnnotationRange struct {
	// The starting line of the range. (Required.)
	StartLine Int `json:"startLine"`
	// The ending line of the range. (Required.)
	EndLine Int `json:"endLine"`

	// The starting column of the range. (Optional.)
	StartColumn *Int `json:"startColumn,omitempty"`
	// The ending column of the range. (Optional.)
	EndColumn *Int `json:"endColumn,omitempty"`
}

// CheckRunAction represents possible further actions the integrator can perform.
type CheckRunAction struct {
	// The text to be displayed on a button in the web UI. (Required.)
	Label String `json:"label"`
	// A short explanation of what this action would do. (Required.)
	Description String `json:"description"`
	// A reference for the action on the integrator's system. (Required.)
	Identifier String `json:"identifier"`
}

// CheckRunFilter represents the filters that are available when fetching check runs.
type CheckRunFilter struct {

	// Filters the check runs by this type. (Optional.)
	CheckType *CheckRunType `json:"checkType,omitempty"`
	// Filters the check runs created by this application ID. (Optional.)
	AppID *Int `json:"appId,omitempty"`
	// Filters the check runs by this name. (Optional.)
	CheckName *String `json:"checkName,omitempty"`
	// Filters the check runs by this status. Superceded by statuses. (Optional.)
	Status *CheckStatusState `json:"status,omitempty"`
	// Filters the check runs by this status. Overrides status. (Optional.)
	Statuses *[]CheckStatusState `json:"statuses,omitempty"`
	// Filters the check runs by these conclusions. (Optional.)
	Conclusions *[]CheckConclusionState `json:"conclusions,omitempty"`
}

// CheckRunOutput represents descriptive details about the check run.
type CheckRunOutput struct {
	// A title to provide for this check run. (Required.)
	Title String `json:"title"`
	// The summary of the check run (supports Commonmark). (Required.)
	Summary String `json:"summary"`

	// The details of the check run (supports Commonmark). (Optional.)
	Text *String `json:"text,omitempty"`
	// The annotations that are made as part of the check run. (Optional.)
	Annotations *[]CheckAnnotationData `json:"annotations,omitempty"`
	// Images attached to the check run output displayed in the GitHub pull request UI. (Optional.)
	Images *[]CheckRunOutputImage `json:"images,omitempty"`
}

// CheckRunOutputImage represents images attached to the check run output displayed in the GitHub pull request UI.
type CheckRunOutputImage struct {
	// The alternative text for the image. (Required.)
	Alt String `json:"alt"`
	// The full URL of the image. (Required.)
	ImageURL URI `json:"imageUrl"`

	// A short image description. (Optional.)
	Caption *String `json:"caption,omitempty"`
}

// CheckSuiteAutoTriggerPreference represents the auto-trigger preferences that are available for check suites.
type CheckSuiteAutoTriggerPreference struct {
	// The node ID of the application that owns the check suite. (Required.)
	AppID ID `json:"appId"`
	// Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. (Required.)
	Setting Boolean `json:"setting"`
}

// CheckSuiteFilter represents the filters that are available when fetching check suites.
type CheckSuiteFilter struct {

	// Filters the check suites created by this application ID. (Optional.)
	AppID *Int `json:"appId,omitempty"`
	// Filters the check suites by this name. (Optional.)
	CheckName *String `json:"checkName,omitempty"`
}

// ClearLabelsFromLabelableInput is an autogenerated input type of ClearLabelsFromLabelable.
type ClearLabelsFromLabelableInput struct {
	// The id of the labelable object to clear the labels from. (Required.)
	LabelableID ID `json:"labelableId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// ClearProjectV2ItemFieldValueInput is an autogenerated input type of ClearProjectV2ItemFieldValue.
type ClearProjectV2ItemFieldValueInput struct {
	// The ID of the Project. (Required.)
	ProjectID ID `json:"projectId"`
	// The ID of the item to be cleared. (Required.)
	ItemID ID `json:"itemId"`
	// The ID of the field to be cleared. (Required.)
	FieldID ID `json:"fieldId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// CloneProjectInput is an autogenerated input type of CloneProject.
type CloneProjectInput struct {
	// The owner ID to create the project under. (Required.)
	TargetOwnerID ID `json:"targetOwnerId"`
	// The source project to clone. (Required.)
	SourceID ID `json:"sourceId"`
	// Whether or not to clone the source project's workflows. (Required.)
	IncludeWorkflows Boolean `json:"includeWorkflows"`
	// The name of the project. (Required.)
	Name String `json:"name"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The description of the project. (Optional.)
	Body *String `json:"body,omitempty"`
	// The visibility of the project, defaults to false (private). (Optional.)
	Public *Boolean `json:"public,omitempty"`
}

// CloneTemplateRepositoryInput is an autogenerated input type of CloneTemplateRepository.
type CloneTemplateRepositoryInput struct {
	// The Node ID of the template repository. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The name of the new repository. (Required.)
	Name String `json:"name"`
	// The ID of the owner for the new repository. (Required.)
	OwnerID ID `json:"ownerId"`
	// Indicates the repository's visibility level. (Required.)
	Visibility RepositoryVisibility `json:"visibility"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// A short description of the new repository. (Optional.)
	Description *String `json:"description,omitempty"`
	// Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template. (Optional.)
	IncludeAllBranches *Boolean `json:"includeAllBranches,omitempty"`
}

// CloseDiscussionInput is an autogenerated input type of CloseDiscussion.
type CloseDiscussionInput struct {
	// ID of the discussion to be closed. (Required.)
	DiscussionID ID `json:"discussionId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The reason why the discussion is being closed. (Optional.)
	Reason *DiscussionCloseReason `json:"reason,omitempty"`
}

// CloseIssueInput is an autogenerated input type of CloseIssue.
type CloseIssueInput struct {
	// ID of the issue to be closed. (Required.)
	IssueID ID `json:"issueId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The reason the issue is to be closed. (Optional.)
	StateReason *IssueClosedStateReason `json:"stateReason,omitempty"`
}

// ClosePullRequestInput is an autogenerated input type of ClosePullRequest.
type ClosePullRequestInput struct {
	// ID of the pull request to be closed. (Required.)
	PullRequestID ID `json:"pullRequestId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// CommitAuthor specifies an author for filtering Git commits.
type CommitAuthor struct {

	// ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails. (Optional.)
	ID *ID `json:"id,omitempty"`
	// Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. (Optional.)
	Emails *[]String `json:"emails,omitempty"`
}

// CommitAuthorEmailPatternParametersInput represents parameters to be used for the commit_author_email_pattern rule.
type CommitAuthorEmailPatternParametersInput struct {
	// The operator to use for matching. (Required.)
	Operator String `json:"operator"`
	// The pattern to match with. (Required.)
	Pattern String `json:"pattern"`

	// How this rule will appear to users. (Optional.)
	Name *String `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches. (Optional.)
	Negate *Boolean `json:"negate,omitempty"`
}

// CommitContributionOrder represents ordering options for commit contribution connections.
type CommitContributionOrder struct {
	// The field by which to order commit contributions. (Required.)
	Field CommitContributionOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// CommitMessage represents a message to include with a new commit.
type CommitMessage struct {
	// The headline of the message. (Required.)
	Headline String `json:"headline"`

	// The body of the message. (Optional.)
	Body *String `json:"body,omitempty"`
}

// CommitMessagePatternParametersInput represents parameters to be used for the commit_message_pattern rule.
type CommitMessagePatternParametersInput struct {
	// The operator to use for matching. (Required.)
	Operator String `json:"operator"`
	// The pattern to match with. (Required.)
	Pattern String `json:"pattern"`

	// How this rule will appear to users. (Optional.)
	Name *String `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches. (Optional.)
	Negate *Boolean `json:"negate,omitempty"`
}

// CommittableBranch represents a git ref for a commit to be appended to. The ref must be a branch, i.e. its fully qualified name must start with `refs/heads/` (although the input is not required to be fully qualified). The Ref may be specified by its global node ID or by the `repositoryNameWithOwner` and `branchName`. ### Examples Specify a branch using a global node ID: { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" } Specify a branch using `repositoryNameWithOwner` and `branchName`: { "repositoryNameWithOwner": "github/graphql-client", "branchName": "main" }.
type CommittableBranch struct {

	// The Node ID of the Ref to be updated. (Optional.)
	ID *ID `json:"id,omitempty"`
	// The nameWithOwner of the repository to commit to. (Optional.)
	RepositoryNameWithOwner *String `json:"repositoryNameWithOwner,omitempty"`
	// The unqualified name of the branch to append the commit to. (Optional.)
	BranchName *String `json:"branchName,omitempty"`
}

// CommitterEmailPatternParametersInput represents parameters to be used for the committer_email_pattern rule.
type CommitterEmailPatternParametersInput struct {
	// The operator to use for matching. (Required.)
	Operator String `json:"operator"`
	// The pattern to match with. (Required.)
	Pattern String `json:"pattern"`

	// How this rule will appear to users. (Optional.)
	Name *String `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches. (Optional.)
	Negate *Boolean `json:"negate,omitempty"`
}

// ContributionOrder represents ordering options for contribution connections.
type ContributionOrder struct {
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// ConvertProjectCardNoteToIssueInput is an autogenerated input type of ConvertProjectCardNoteToIssue.
type ConvertProjectCardNoteToIssueInput struct {
	// The ProjectCard ID to convert. (Required.)
	ProjectCardID ID `json:"projectCardId"`
	// The ID of the repository to create the issue in. (Required.)
	RepositoryID ID `json:"repositoryId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The title of the newly created issue. Defaults to the card's note text. (Optional.)
	Title *String `json:"title,omitempty"`
	// The body of the newly created issue. (Optional.)
	Body *String `json:"body,omitempty"`
}

// ConvertPullRequestToDraftInput is an autogenerated input type of ConvertPullRequestToDraft.
type ConvertPullRequestToDraftInput struct {
	// ID of the pull request to convert to draft. (Required.)
	PullRequestID ID `json:"pullRequestId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// CopyProjectV2Input is an autogenerated input type of CopyProjectV2.
type CopyProjectV2Input struct {
	// The ID of the source Project to copy. (Required.)
	ProjectID ID `json:"projectId"`
	// The owner ID of the new project. (Required.)
	OwnerID ID `json:"ownerId"`
	// The title of the project. (Required.)
	Title String `json:"title"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Include draft issues in the new project. (Optional.)
	IncludeDraftIssues *Boolean `json:"includeDraftIssues,omitempty"`
}

// CreateAttributionInvitationInput is an autogenerated input type of CreateAttributionInvitation.
type CreateAttributionInvitationInput struct {
	// The Node ID of the owner scoping the reattributable data. (Required.)
	OwnerID ID `json:"ownerId"`
	// The Node ID of the account owning the data to reattribute. (Required.)
	SourceID ID `json:"sourceId"`
	// The Node ID of the account which may claim the data. (Required.)
	TargetID ID `json:"targetId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// CreateBranchProtectionRuleInput is an autogenerated input type of CreateBranchProtectionRule.
type CreateBranchProtectionRuleInput struct {
	// The global relay id of the repository in which a new branch protection rule should be created in. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The glob-like pattern used to determine matching branches. (Required.)
	Pattern String `json:"pattern"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Are approving reviews required to update matching branches. (Optional.)
	RequiresApprovingReviews *Boolean `json:"requiresApprovingReviews,omitempty"`
	// Number of approving reviews required to update matching branches. (Optional.)
	RequiredApprovingReviewCount *Int `json:"requiredApprovingReviewCount,omitempty"`
	// Are commits required to be signed. (Optional.)
	RequiresCommitSignatures *Boolean `json:"requiresCommitSignatures,omitempty"`
	// Are merge commits prohibited from being pushed to this branch. (Optional.)
	RequiresLinearHistory *Boolean `json:"requiresLinearHistory,omitempty"`
	// Is branch creation a protected operation. (Optional.)
	BlocksCreations *Boolean `json:"blocksCreations,omitempty"`
	// Are force pushes allowed on this branch. (Optional.)
	AllowsForcePushes *Boolean `json:"allowsForcePushes,omitempty"`
	// Can this branch be deleted. (Optional.)
	AllowsDeletions *Boolean `json:"allowsDeletions,omitempty"`
	// Can admins override branch protection. (Optional.)
	IsAdminEnforced *Boolean `json:"isAdminEnforced,omitempty"`
	// Are status checks required to update matching branches. (Optional.)
	RequiresStatusChecks *Boolean `json:"requiresStatusChecks,omitempty"`
	// Are branches required to be up to date before merging. (Optional.)
	RequiresStrictStatusChecks *Boolean `json:"requiresStrictStatusChecks,omitempty"`
	// Are reviews from code owners required to update matching branches. (Optional.)
	RequiresCodeOwnerReviews *Boolean `json:"requiresCodeOwnerReviews,omitempty"`
	// Will new commits pushed to matching branches dismiss pull request review approvals. (Optional.)
	DismissesStaleReviews *Boolean `json:"dismissesStaleReviews,omitempty"`
	// Is dismissal of pull request reviews restricted. (Optional.)
	RestrictsReviewDismissals *Boolean `json:"restrictsReviewDismissals,omitempty"`
	// A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. (Optional.)
	ReviewDismissalActorIDs *[]ID `json:"reviewDismissalActorIds,omitempty"`
	// A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. (Optional.)
	BypassPullRequestActorIDs *[]ID `json:"bypassPullRequestActorIds,omitempty"`
	// A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. (Optional.)
	BypassForcePushActorIDs *[]ID `json:"bypassForcePushActorIds,omitempty"`
	// Is pushing to matching branches restricted. (Optional.)
	RestrictsPushes *Boolean `json:"restrictsPushes,omitempty"`
	// A list of User, Team, or App IDs allowed to push to matching branches. (Optional.)
	PushActorIDs *[]ID `json:"pushActorIds,omitempty"`
	// List of required status check contexts that must pass for commits to be accepted to matching branches. (Optional.)
	RequiredStatusCheckContexts *[]String `json:"requiredStatusCheckContexts,omitempty"`
	// The list of required status checks. (Optional.)
	RequiredStatusChecks *[]RequiredStatusCheckInput `json:"requiredStatusChecks,omitempty"`
	// Are successful deployments required before merging. (Optional.)
	RequiresDeployments *Boolean `json:"requiresDeployments,omitempty"`
	// The list of required deployment environments. (Optional.)
	RequiredDeploymentEnvironments *[]String `json:"requiredDeploymentEnvironments,omitempty"`
	// Are conversations required to be resolved before merging. (Optional.)
	RequiresConversationResolution *Boolean `json:"requiresConversationResolution,omitempty"`
	// Whether the most recent push must be approved by someone other than the person who pushed it. (Optional.)
	RequireLastPushApproval *Boolean `json:"requireLastPushApproval,omitempty"`
	// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. (Optional.)
	LockBranch *Boolean `json:"lockBranch,omitempty"`
	// Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. (Optional.)
	LockAllowsFetchAndMerge *Boolean `json:"lockAllowsFetchAndMerge,omitempty"`
}

// CreateCheckRunInput is an autogenerated input type of CreateCheckRun.
type CreateCheckRunInput struct {
	// The node ID of the repository. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The name of the check. (Required.)
	Name String `json:"name"`
	// The SHA of the head commit. (Required.)
	HeadSha GitObjectID `json:"headSha"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The URL of the integrator's site that has the full details of the check. (Optional.)
	DetailsURL *URI `json:"detailsUrl,omitempty"`
	// A reference for the run on the integrator's system. (Optional.)
	ExternalID *String `json:"externalId,omitempty"`
	// The current status. (Optional.)
	Status *RequestableCheckStatusState `json:"status,omitempty"`
	// The time that the check run began. (Optional.)
	StartedAt *DateTime `json:"startedAt,omitempty"`
	// The final conclusion of the check. (Optional.)
	Conclusion *CheckConclusionState `json:"conclusion,omitempty"`
	// The time that the check run finished. (Optional.)
	CompletedAt *DateTime `json:"completedAt,omitempty"`
	// Descriptive details about the run. (Optional.)
	Output *CheckRunOutput `json:"output,omitempty"`
	// Possible further actions the integrator can perform, which a user may trigger. (Optional.)
	Actions *[]CheckRunAction `json:"actions,omitempty"`
}

// CreateCheckSuiteInput is an autogenerated input type of CreateCheckSuite.
type CreateCheckSuiteInput struct {
	// The Node ID of the repository. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The SHA of the head commit. (Required.)
	HeadSha GitObjectID `json:"headSha"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// CreateCommitOnBranchInput is an autogenerated input type of CreateCommitOnBranch.
type CreateCommitOnBranchInput struct {
	// The Ref to be updated. Must be a branch. (Required.)
	Branch CommittableBranch `json:"branch"`
	// The commit message the be included with the commit. (Required.)
	Message CommitMessage `json:"message"`
	// The git commit oid expected at the head of the branch prior to the commit. (Required.)
	ExpectedHeadOid GitObjectID `json:"expectedHeadOid"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// A description of changes to files in this commit. (Optional.)
	FileChanges *FileChanges `json:"fileChanges,omitempty"`
}

// CreateDeploymentInput is an autogenerated input type of CreateDeployment.
type CreateDeploymentInput struct {
	// The node ID of the repository. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The node ID of the ref to be deployed. (Required.)
	RefID ID `json:"refId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Attempt to automatically merge the default branch into the requested ref, defaults to true. (Optional.)
	AutoMerge *Boolean `json:"autoMerge,omitempty"`
	// The status contexts to verify against commit status checks. To bypass required contexts, pass an empty array. Defaults to all unique contexts. (Optional.)
	RequiredContexts *[]String `json:"requiredContexts,omitempty"`
	// Short description of the deployment. (Optional.)
	Description *String `json:"description,omitempty"`
	// Name for the target deployment environment. (Optional.)
	Environment *String `json:"environment,omitempty"`
	// Specifies a task to execute. (Optional.)
	Task *String `json:"task,omitempty"`
	// JSON payload with extra information about the deployment. (Optional.)
	Payload *String `json:"payload,omitempty"`
}

// CreateDeploymentStatusInput is an autogenerated input type of CreateDeploymentStatus.
type CreateDeploymentStatusInput struct {
	// The node ID of the deployment. (Required.)
	DeploymentID ID `json:"deploymentId"`
	// The state of the deployment. (Required.)
	State DeploymentStatusState `json:"state"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// A short description of the status. Maximum length of 140 characters. (Optional.)
	Description *String `json:"description,omitempty"`
	// If provided, updates the environment of the deploy. Otherwise, does not modify the environment. (Optional.)
	Environment *String `json:"environment,omitempty"`
	// Sets the URL for accessing your environment. (Optional.)
	EnvironmentURL *String `json:"environmentUrl,omitempty"`
	// Adds a new inactive status to all non-transient, non-production environment deployments with the same repository and environment name as the created status's deployment. (Optional.)
	AutoInactive *Boolean `json:"autoInactive,omitempty"`
	// The log URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. (Optional.)
	LogURL *String `json:"logUrl,omitempty"`
}

// CreateDiscussionInput is an autogenerated input type of CreateDiscussion.
type CreateDiscussionInput struct {
	// The id of the repository on which to create the discussion. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The title of the discussion. (Required.)
	Title String `json:"title"`
	// The body of the discussion. (Required.)
	Body String `json:"body"`
	// The id of the discussion category to associate with this discussion. (Required.)
	CategoryID ID `json:"categoryId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// CreateEnterpriseOrganizationInput is an autogenerated input type of CreateEnterpriseOrganization.
type CreateEnterpriseOrganizationInput struct {
	// The ID of the enterprise owning the new organization. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The login of the new organization. (Required.)
	Login String `json:"login"`
	// The profile name of the new organization. (Required.)
	ProfileName String `json:"profileName"`
	// The email used for sending billing receipts. (Required.)
	BillingEmail String `json:"billingEmail"`
	// The logins for the administrators of the new organization. (Required.)
	AdminLogins []String `json:"adminLogins"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// CreateEnvironmentInput is an autogenerated input type of CreateEnvironment.
type CreateEnvironmentInput struct {
	// The node ID of the repository. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The name of the environment. (Required.)
	Name String `json:"name"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// CreateIpAllowListEntryInput is an autogenerated input type of CreateIpAllowListEntry.
type CreateIpAllowListEntryInput struct {
	// The ID of the owner for which to create the new IP allow list entry. (Required.)
	OwnerID ID `json:"ownerId"`
	// An IP address or range of addresses in CIDR notation. (Required.)
	AllowListValue String `json:"allowListValue"`
	// Whether the IP allow list entry is active when an IP allow list is enabled. (Required.)
	IsActive Boolean `json:"isActive"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// An optional name for the IP allow list entry. (Optional.)
	Name *String `json:"name,omitempty"`
}

// CreateIssueInput is an autogenerated input type of CreateIssue.
type CreateIssueInput struct {
	// The Node ID of the repository. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The title for the issue. (Required.)
	Title String `json:"title"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The body for the issue description. (Optional.)
	Body *String `json:"body,omitempty"`
	// The Node ID for the user assignee for this issue. (Optional.)
	AssigneeIDs *[]ID `json:"assigneeIds,omitempty"`
	// The Node ID of the milestone for this issue. (Optional.)
	MilestoneID *ID `json:"milestoneId,omitempty"`
	// An array of Node IDs of labels for this issue. (Optional.)
	LabelIDs *[]ID `json:"labelIds,omitempty"`
	// An array of Node IDs for projects associated with this issue. (Optional.)
	ProjectIDs *[]ID `json:"projectIds,omitempty"`
	// The name of an issue template in the repository, assigns labels and assignees from the template to the issue. (Optional.)
	IssueTemplate *String `json:"issueTemplate,omitempty"`
}

// CreateLabelInput is an autogenerated input type of CreateLabel.
type CreateLabelInput struct {
	// The Node ID of the repository. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// A 6 character hex code, without the leading #, identifying the color of the label. (Required.)
	Color String `json:"color"`
	// The name of the label. (Required.)
	Name String `json:"name"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// A brief description of the label, such as its purpose. (Optional.)
	Description *String `json:"description,omitempty"`
}

// CreateLinkedBranchInput is an autogenerated input type of CreateLinkedBranch.
type CreateLinkedBranchInput struct {
	// ID of the issue to link to. (Required.)
	IssueID ID `json:"issueId"`
	// The commit SHA to base the new branch on. (Required.)
	Oid GitObjectID `json:"oid"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The name of the new branch. Defaults to issue number and title. (Optional.)
	Name *String `json:"name,omitempty"`
	// ID of the repository to create the branch in. Defaults to the issue repository. (Optional.)
	RepositoryID *ID `json:"repositoryId,omitempty"`
}

// CreateMigrationSourceInput is an autogenerated input type of CreateMigrationSource.
type CreateMigrationSourceInput struct {
	// The migration source name. (Required.)
	Name String `json:"name"`
	// The migration source type. (Required.)
	Type MigrationSourceType `json:"type"`
	// The ID of the organization that will own the migration source. (Required.)
	OwnerID ID `json:"ownerId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. (Optional.)
	URL *String `json:"url,omitempty"`
	// The migration source access token. (Optional.)
	AccessToken *String `json:"accessToken,omitempty"`
	// The GitHub personal access token of the user importing to the target repository. (Optional.)
	GitHubPat *String `json:"githubPat,omitempty"`
}

// CreateProjectInput is an autogenerated input type of CreateProject.
type CreateProjectInput struct {
	// The owner ID to create the project under. (Required.)
	OwnerID ID `json:"ownerId"`
	// The name of project. (Required.)
	Name String `json:"name"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The description of project. (Optional.)
	Body *String `json:"body,omitempty"`
	// The name of the GitHub-provided template. (Optional.)
	Template *ProjectTemplate `json:"template,omitempty"`
	// A list of repository IDs to create as linked repositories for the project. (Optional.)
	RepositoryIDs *[]ID `json:"repositoryIds,omitempty"`
}

// CreateProjectV2FieldInput is an autogenerated input type of CreateProjectV2Field.
type CreateProjectV2FieldInput struct {
	// The ID of the Project to create the field in. (Required.)
	ProjectID ID `json:"projectId"`
	// The data type of the field. (Required.)
	DataType ProjectV2CustomFieldType `json:"dataType"`
	// The name of the field. (Required.)
	Name String `json:"name"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Options for a single select field. At least one value is required if data_type is SINGLE_SELECT. (Optional.)
	SingleSelectOptions *[]ProjectV2SingleSelectFieldOptionInput `json:"singleSelectOptions,omitempty"`
}

// CreateProjectV2Input is an autogenerated input type of CreateProjectV2.
type CreateProjectV2Input struct {
	// The owner ID to create the project under. (Required.)
	OwnerID ID `json:"ownerId"`
	// The title of the project. (Required.)
	Title String `json:"title"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The repository to link the project to. (Optional.)
	RepositoryID *ID `json:"repositoryId,omitempty"`
	// The team to link the project to. The team will be granted read permissions. (Optional.)
	TeamID *ID `json:"teamId,omitempty"`
}

// CreatePullRequestInput is an autogenerated input type of CreatePullRequest.
type CreatePullRequestInput struct {
	// The Node ID of the repository. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. (Required.)
	BaseRefName String `json:"baseRefName"`
	// The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head_ref_name` with a user like this: `username:branch`. (Required.)
	HeadRefName String `json:"headRefName"`
	// The title of the pull request. (Required.)
	Title String `json:"title"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The Node ID of the head repository. (Optional.)
	HeadRepositoryID *ID `json:"headRepositoryId,omitempty"`
	// The contents of the pull request. (Optional.)
	Body *String `json:"body,omitempty"`
	// Indicates whether maintainers can modify the pull request. (Optional.)
	MaintainerCanModify *Boolean `json:"maintainerCanModify,omitempty"`
	// Indicates whether this pull request should be a draft. (Optional.)
	Draft *Boolean `json:"draft,omitempty"`
}

// CreateRefInput is an autogenerated input type of CreateRef.
type CreateRefInput struct {
	// The Node ID of the Repository to create the Ref in. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). (Required.)
	Name String `json:"name"`
	// The GitObjectID that the new Ref shall target. Must point to a commit. (Required.)
	Oid GitObjectID `json:"oid"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// CreateRepositoryInput is an autogenerated input type of CreateRepository.
type CreateRepositoryInput struct {
	// The name of the new repository. (Required.)
	Name String `json:"name"`
	// Indicates the repository's visibility level. (Required.)
	Visibility RepositoryVisibility `json:"visibility"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The ID of the owner for the new repository. (Optional.)
	OwnerID *ID `json:"ownerId,omitempty"`
	// A short description of the new repository. (Optional.)
	Description *String `json:"description,omitempty"`
	// Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. (Optional.)
	Template *Boolean `json:"template,omitempty"`
	// The URL for a web page about this repository. (Optional.)
	HomepageURL *URI `json:"homepageUrl,omitempty"`
	// Indicates if the repository should have the wiki feature enabled. (Optional.)
	HasWikiEnabled *Boolean `json:"hasWikiEnabled,omitempty"`
	// Indicates if the repository should have the issues feature enabled. (Optional.)
	HasIssuesEnabled *Boolean `json:"hasIssuesEnabled,omitempty"`
	// When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository. (Optional.)
	TeamID *ID `json:"teamId,omitempty"`
}

// CreateRepositoryRulesetInput is an autogenerated input type of CreateRepositoryRuleset.
type CreateRepositoryRulesetInput struct {
	// The global relay id of the source in which a new ruleset should be created in. (Required.)
	SourceID ID `json:"sourceId"`
	// The name of the ruleset. (Required.)
	Name String `json:"name"`
	// The set of conditions for this ruleset. (Required.)
	Conditions RepositoryRuleConditionsInput `json:"conditions"`
	// The enforcement level for this ruleset. (Required.)
	Enforcement RuleEnforcement `json:"enforcement"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The target of the ruleset. (Optional.)
	Target *RepositoryRulesetTarget `json:"target,omitempty"`
	// The list of rules for this ruleset. (Optional.)
	Rules *[]RepositoryRuleInput `json:"rules,omitempty"`
	// A list of actors that are allowed to bypass rules in this ruleset. (Optional.)
	BypassActors *[]RepositoryRulesetBypassActorInput `json:"bypassActors,omitempty"`
}

// CreateSponsorsListingInput is an autogenerated input type of CreateSponsorsListing.
type CreateSponsorsListingInput struct {

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The username of the organization to create a GitHub Sponsors profile for, if desired. Defaults to creating a GitHub Sponsors profile for the authenticated user if omitted. (Optional.)
	SponsorableLogin *String `json:"sponsorableLogin,omitempty"`
	// The username of the supported fiscal host's GitHub organization, if you want to receive sponsorship payouts through a fiscal host rather than directly to a bank account. For example, 'Open-Source-Collective' for Open Source Collective or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts for more information. (Optional.)
	FiscalHostLogin *String `json:"fiscalHostLogin,omitempty"`
	// The URL for your profile page on the fiscal host's website, e.g., https://opencollective.com/babel or https://numfocus.org/project/bokeh. Required if fiscalHostLogin is specified. (Optional.)
	FiscallyHostedProjectProfileURL *String `json:"fiscallyHostedProjectProfileUrl,omitempty"`
	// The country or region where the sponsorable's bank account is located. Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified. (Optional.)
	BillingCountryOrRegionCode *SponsorsCountryOrRegionCode `json:"billingCountryOrRegionCode,omitempty"`
	// The country or region where the sponsorable resides. This is for tax purposes. Required if the sponsorable is yourself, ignored when sponsorableLogin specifies an organization. (Optional.)
	ResidenceCountryOrRegionCode *SponsorsCountryOrRegionCode `json:"residenceCountryOrRegionCode,omitempty"`
	// The email address we should use to contact you about the GitHub Sponsors profile being created. This will not be shared publicly. Must be a verified email address already on your GitHub account. Only relevant when the sponsorable is yourself. Defaults to your primary email address on file if omitted. (Optional.)
	ContactEmail *String `json:"contactEmail,omitempty"`
	// Provide an introduction to serve as the main focus that appears on your GitHub Sponsors profile. It's a great opportunity to help potential sponsors learn more about you, your work, and why their sponsorship is important to you. GitHub-flavored Markdown is supported. (Optional.)
	FullDescription *String `json:"fullDescription,omitempty"`
}

// CreateSponsorsTierInput is an autogenerated input type of CreateSponsorsTier.
type CreateSponsorsTierInput struct {
	// The value of the new tier in US dollars. Valid values: 1-12000. (Required.)
	Amount Int `json:"amount"`
	// A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. (Required.)
	Description String `json:"description"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The ID of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableLogin is not given. (Optional.)
	SponsorableID *ID `json:"sponsorableId,omitempty"`
	// The username of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableId is not given. (Optional.)
	SponsorableLogin *String `json:"sponsorableLogin,omitempty"`
	// Whether sponsorships using this tier should happen monthly/yearly or just once. (Optional.)
	IsRecurring *Boolean `json:"isRecurring,omitempty"`
	// Optional ID of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. (Optional.)
	RepositoryID *ID `json:"repositoryId,omitempty"`
	// Optional login of the organization owner of the private repository that sponsors at this tier should gain read-only access to. Necessary if repositoryName is given. Will be ignored if repositoryId is given. (Optional.)
	RepositoryOwnerLogin *String `json:"repositoryOwnerLogin,omitempty"`
	// Optional name of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. Necessary if repositoryOwnerLogin is given. Will be ignored if repositoryId is given. (Optional.)
	RepositoryName *String `json:"repositoryName,omitempty"`
	// Optional message new sponsors at this tier will receive. (Optional.)
	WelcomeMessage *String `json:"welcomeMessage,omitempty"`
	// Whether to make the tier available immediately for sponsors to choose. Defaults to creating a draft tier that will not be publicly visible. (Optional.)
	Publish *Boolean `json:"publish,omitempty"`
}

// CreateSponsorshipInput is an autogenerated input type of CreateSponsorship.
type CreateSponsorshipInput struct {

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. (Optional.)
	SponsorID *ID `json:"sponsorId,omitempty"`
	// The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. (Optional.)
	SponsorLogin *String `json:"sponsorLogin,omitempty"`
	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. (Optional.)
	SponsorableID *ID `json:"sponsorableId,omitempty"`
	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. (Optional.)
	SponsorableLogin *String `json:"sponsorableLogin,omitempty"`
	// The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. (Optional.)
	TierID *ID `json:"tierId,omitempty"`
	// The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. (Optional.)
	Amount *Int `json:"amount,omitempty"`
	// Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. (Optional.)
	IsRecurring *Boolean `json:"isRecurring,omitempty"`
	// Whether the sponsor should receive email updates from the sponsorable. (Optional.)
	ReceiveEmails *Boolean `json:"receiveEmails,omitempty"`
	// Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. (Optional.)
	PrivacyLevel *SponsorshipPrivacy `json:"privacyLevel,omitempty"`
}

// CreateSponsorshipsInput is an autogenerated input type of CreateSponsorships.
type CreateSponsorshipsInput struct {
	// The username of the user or organization who is acting as the sponsor, paying for the sponsorships. (Required.)
	SponsorLogin String `json:"sponsorLogin"`
	// The list of maintainers to sponsor and for how much apiece. (Required.)
	Sponsorships []BulkSponsorship `json:"sponsorships"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Whether the sponsor should receive email updates from the sponsorables. (Optional.)
	ReceiveEmails *Boolean `json:"receiveEmails,omitempty"`
	// Specify whether others should be able to see that the sponsor is sponsoring the sponsorables. Public visibility still does not reveal the dollar value of the sponsorship. (Optional.)
	PrivacyLevel *SponsorshipPrivacy `json:"privacyLevel,omitempty"`
	// Whether the sponsorships created should continue each billing cycle for the sponsor (monthly or annually), versus lasting only a single month. Defaults to one-time sponsorships. (Optional.)
	Recurring *Boolean `json:"recurring,omitempty"`
}

// CreateTeamDiscussionCommentInput is an autogenerated input type of CreateTeamDiscussionComment.
type CreateTeamDiscussionCommentInput struct {

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The ID of the discussion to which the comment belongs. This field is required. **Upcoming Change on 2024-07-01 UTC** **Description:** `discussionId` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions. (Optional.)
	DiscussionID *ID `json:"discussionId,omitempty"`
	// The content of the comment. This field is required. **Upcoming Change on 2024-07-01 UTC** **Description:** `body` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions. (Optional.)
	Body *String `json:"body,omitempty"`
}

// CreateTeamDiscussionInput is an autogenerated input type of CreateTeamDiscussion.
type CreateTeamDiscussionInput struct {

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The ID of the team to which the discussion belongs. This field is required. **Upcoming Change on 2024-07-01 UTC** **Description:** `teamId` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions. (Optional.)
	TeamID *ID `json:"teamId,omitempty"`
	// The title of the discussion. This field is required. **Upcoming Change on 2024-07-01 UTC** **Description:** `title` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions. (Optional.)
	Title *String `json:"title,omitempty"`
	// The content of the discussion. This field is required. **Upcoming Change on 2024-07-01 UTC** **Description:** `body` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions. (Optional.)
	Body *String `json:"body,omitempty"`
	// If true, restricts the visibility of this discussion to team members and organization owners. If false or not specified, allows any organization member to view this discussion. **Upcoming Change on 2024-07-01 UTC** **Description:** `private` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions. (Optional.)
	Private *Boolean `json:"private,omitempty"`
}

// CreateUserListInput is an autogenerated input type of CreateUserList.
type CreateUserListInput struct {
	// The name of the new list. (Required.)
	Name String `json:"name"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// A description of the list. (Optional.)
	Description *String `json:"description,omitempty"`
	// Whether or not the list is private. (Optional.)
	IsPrivate *Boolean `json:"isPrivate,omitempty"`
}

// DeclineTopicSuggestionInput is an autogenerated input type of DeclineTopicSuggestion.
type DeclineTopicSuggestionInput struct {

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The Node ID of the repository. **Upcoming Change on 2024-04-01 UTC** **Description:** `repositoryId` will be removed. **Reason:** Suggested topics are no longer supported. (Optional.)
	RepositoryID *ID `json:"repositoryId,omitempty"`
	// The name of the suggested topic. **Upcoming Change on 2024-04-01 UTC** **Description:** `name` will be removed. **Reason:** Suggested topics are no longer supported. (Optional.)
	Name *String `json:"name,omitempty"`
	// The reason why the suggested topic is declined. **Upcoming Change on 2024-04-01 UTC** **Description:** `reason` will be removed. **Reason:** Suggested topics are no longer supported. (Optional.)
	Reason *TopicSuggestionDeclineReason `json:"reason,omitempty"`
}

// DeleteBranchProtectionRuleInput is an autogenerated input type of DeleteBranchProtectionRule.
type DeleteBranchProtectionRuleInput struct {
	// The global relay id of the branch protection rule to be deleted. (Required.)
	BranchProtectionRuleID ID `json:"branchProtectionRuleId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteDeploymentInput is an autogenerated input type of DeleteDeployment.
type DeleteDeploymentInput struct {
	// The Node ID of the deployment to be deleted. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteDiscussionCommentInput is an autogenerated input type of DeleteDiscussionComment.
type DeleteDiscussionCommentInput struct {
	// The Node id of the discussion comment to delete. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteDiscussionInput is an autogenerated input type of DeleteDiscussion.
type DeleteDiscussionInput struct {
	// The id of the discussion to delete. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteEnvironmentInput is an autogenerated input type of DeleteEnvironment.
type DeleteEnvironmentInput struct {
	// The Node ID of the environment to be deleted. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteIpAllowListEntryInput is an autogenerated input type of DeleteIpAllowListEntry.
type DeleteIpAllowListEntryInput struct {
	// The ID of the IP allow list entry to delete. (Required.)
	IPAllowListEntryID ID `json:"ipAllowListEntryId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteIssueCommentInput is an autogenerated input type of DeleteIssueComment.
type DeleteIssueCommentInput struct {
	// The ID of the comment to delete. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteIssueInput is an autogenerated input type of DeleteIssue.
type DeleteIssueInput struct {
	// The ID of the issue to delete. (Required.)
	IssueID ID `json:"issueId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteLabelInput is an autogenerated input type of DeleteLabel.
type DeleteLabelInput struct {
	// The Node ID of the label to be deleted. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteLinkedBranchInput is an autogenerated input type of DeleteLinkedBranch.
type DeleteLinkedBranchInput struct {
	// The ID of the linked branch. (Required.)
	LinkedBranchID ID `json:"linkedBranchId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeletePackageVersionInput is an autogenerated input type of DeletePackageVersion.
type DeletePackageVersionInput struct {
	// The ID of the package version to be deleted. (Required.)
	PackageVersionID ID `json:"packageVersionId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteProjectCardInput is an autogenerated input type of DeleteProjectCard.
type DeleteProjectCardInput struct {
	// The id of the card to delete. (Required.)
	CardID ID `json:"cardId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteProjectColumnInput is an autogenerated input type of DeleteProjectColumn.
type DeleteProjectColumnInput struct {
	// The id of the column to delete. (Required.)
	ColumnID ID `json:"columnId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteProjectInput is an autogenerated input type of DeleteProject.
type DeleteProjectInput struct {
	// The Project ID to update. (Required.)
	ProjectID ID `json:"projectId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteProjectV2FieldInput is an autogenerated input type of DeleteProjectV2Field.
type DeleteProjectV2FieldInput struct {
	// The ID of the field to delete. (Required.)
	FieldID ID `json:"fieldId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteProjectV2Input is an autogenerated input type of DeleteProjectV2.
type DeleteProjectV2Input struct {
	// The ID of the Project to delete. (Required.)
	ProjectID ID `json:"projectId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteProjectV2ItemInput is an autogenerated input type of DeleteProjectV2Item.
type DeleteProjectV2ItemInput struct {
	// The ID of the Project from which the item should be removed. (Required.)
	ProjectID ID `json:"projectId"`
	// The ID of the item to be removed. (Required.)
	ItemID ID `json:"itemId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteProjectV2WorkflowInput is an autogenerated input type of DeleteProjectV2Workflow.
type DeleteProjectV2WorkflowInput struct {
	// The ID of the workflow to be removed. (Required.)
	WorkflowID ID `json:"workflowId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeletePullRequestReviewCommentInput is an autogenerated input type of DeletePullRequestReviewComment.
type DeletePullRequestReviewCommentInput struct {
	// The ID of the comment to delete. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeletePullRequestReviewInput is an autogenerated input type of DeletePullRequestReview.
type DeletePullRequestReviewInput struct {
	// The Node ID of the pull request review to delete. (Required.)
	PullRequestReviewID ID `json:"pullRequestReviewId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteRefInput is an autogenerated input type of DeleteRef.
type DeleteRefInput struct {
	// The Node ID of the Ref to be deleted. (Required.)
	RefID ID `json:"refId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteRepositoryRulesetInput is an autogenerated input type of DeleteRepositoryRuleset.
type DeleteRepositoryRulesetInput struct {
	// The global relay id of the repository ruleset to be deleted. (Required.)
	RepositoryRulesetID ID `json:"repositoryRulesetId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteTeamDiscussionCommentInput is an autogenerated input type of DeleteTeamDiscussionComment.
type DeleteTeamDiscussionCommentInput struct {
	// The ID of the comment to delete. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteTeamDiscussionInput is an autogenerated input type of DeleteTeamDiscussion.
type DeleteTeamDiscussionInput struct {
	// The discussion ID to delete. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteUserListInput is an autogenerated input type of DeleteUserList.
type DeleteUserListInput struct {
	// The ID of the list to delete. (Required.)
	ListID ID `json:"listId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeleteVerifiableDomainInput is an autogenerated input type of DeleteVerifiableDomain.
type DeleteVerifiableDomainInput struct {
	// The ID of the verifiable domain to delete. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DeploymentOrder represents ordering options for deployment connections.
type DeploymentOrder struct {
	// The field to order deployments by. (Required.)
	Field DeploymentOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// DequeuePullRequestInput is an autogenerated input type of DequeuePullRequest.
type DequeuePullRequestInput struct {
	// The ID of the pull request to be dequeued. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DisablePullRequestAutoMergeInput is an autogenerated input type of DisablePullRequestAutoMerge.
type DisablePullRequestAutoMergeInput struct {
	// ID of the pull request to disable auto merge on. (Required.)
	PullRequestID ID `json:"pullRequestId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DiscussionOrder represents ways in which lists of discussions can be ordered upon return.
type DiscussionOrder struct {
	// The field by which to order discussions. (Required.)
	Field DiscussionOrderField `json:"field"`
	// The direction in which to order discussions by the specified field. (Required.)
	Direction OrderDirection `json:"direction"`
}

// DiscussionPollOptionOrder represents ordering options for discussion poll option connections.
type DiscussionPollOptionOrder struct {
	// The field to order poll options by. (Required.)
	Field DiscussionPollOptionOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// DismissPullRequestReviewInput is an autogenerated input type of DismissPullRequestReview.
type DismissPullRequestReviewInput struct {
	// The Node ID of the pull request review to modify. (Required.)
	PullRequestReviewID ID `json:"pullRequestReviewId"`
	// The contents of the pull request review dismissal message. (Required.)
	Message String `json:"message"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DismissRepositoryVulnerabilityAlertInput is an autogenerated input type of DismissRepositoryVulnerabilityAlert.
type DismissRepositoryVulnerabilityAlertInput struct {
	// The Dependabot alert ID to dismiss. (Required.)
	RepositoryVulnerabilityAlertID ID `json:"repositoryVulnerabilityAlertId"`
	// The reason the Dependabot alert is being dismissed. (Required.)
	DismissReason DismissReason `json:"dismissReason"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// DraftPullRequestReviewComment specifies a review comment to be left with a Pull Request Review.
type DraftPullRequestReviewComment struct {
	// Path to the file being commented on. (Required.)
	Path String `json:"path"`
	// Position in the file to leave a comment on. (Required.)
	Position Int `json:"position"`
	// Body of the comment to leave. (Required.)
	Body String `json:"body"`
}

// DraftPullRequestReviewThread specifies a review comment thread to be left with a Pull Request Review.
type DraftPullRequestReviewThread struct {
	// Path to the file being commented on. (Required.)
	Path String `json:"path"`
	// The line of the blob to which the thread refers. The end of the line range for multi-line comments. (Required.)
	Line Int `json:"line"`
	// Body of the comment to leave. (Required.)
	Body String `json:"body"`

	// The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. (Optional.)
	Side *DiffSide `json:"side,omitempty"`
	// The first line of the range to which the comment refers. (Optional.)
	StartLine *Int `json:"startLine,omitempty"`
	// The side of the diff on which the start line resides. (Optional.)
	StartSide *DiffSide `json:"startSide,omitempty"`
}

// EnablePullRequestAutoMergeInput is an autogenerated input type of EnablePullRequestAutoMerge.
type EnablePullRequestAutoMergeInput struct {
	// ID of the pull request to enable auto-merge on. (Required.)
	PullRequestID ID `json:"pullRequestId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used. NOTE: when merging with a merge queue any input value for commit headline is ignored. (Optional.)
	CommitHeadline *String `json:"commitHeadline,omitempty"`
	// Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used. NOTE: when merging with a merge queue any input value for commit message is ignored. (Optional.)
	CommitBody *String `json:"commitBody,omitempty"`
	// The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging with a merge queue any input value for merge method is ignored. (Optional.)
	MergeMethod *PullRequestMergeMethod `json:"mergeMethod,omitempty"`
	// The email address to associate with this merge. (Optional.)
	AuthorEmail *String `json:"authorEmail,omitempty"`
	// The expected head OID of the pull request. (Optional.)
	ExpectedHeadOid *GitObjectID `json:"expectedHeadOid,omitempty"`
}

// EnqueuePullRequestInput is an autogenerated input type of EnqueuePullRequest.
type EnqueuePullRequestInput struct {
	// The ID of the pull request to enqueue. (Required.)
	PullRequestID ID `json:"pullRequestId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Add the pull request to the front of the queue. (Optional.)
	Jump *Boolean `json:"jump,omitempty"`
	// The expected head OID of the pull request. (Optional.)
	ExpectedHeadOid *GitObjectID `json:"expectedHeadOid,omitempty"`
}

// EnterpriseAdministratorInvitationOrder represents ordering options for enterprise administrator invitation connections.
type EnterpriseAdministratorInvitationOrder struct {
	// The field to order enterprise administrator invitations by. (Required.)
	Field EnterpriseAdministratorInvitationOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// EnterpriseMemberOrder represents ordering options for enterprise member connections.
type EnterpriseMemberOrder struct {
	// The field to order enterprise members by. (Required.)
	Field EnterpriseMemberOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// EnterpriseOrder represents ordering options for enterprises.
type EnterpriseOrder struct {
	// The field to order enterprises by. (Required.)
	Field EnterpriseOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// EnterpriseServerInstallationOrder represents ordering options for Enterprise Server installation connections.
type EnterpriseServerInstallationOrder struct {
	// The field to order Enterprise Server installations by. (Required.)
	Field EnterpriseServerInstallationOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// EnterpriseServerUserAccountEmailOrder represents ordering options for Enterprise Server user account email connections.
type EnterpriseServerUserAccountEmailOrder struct {
	// The field to order emails by. (Required.)
	Field EnterpriseServerUserAccountEmailOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// EnterpriseServerUserAccountOrder represents ordering options for Enterprise Server user account connections.
type EnterpriseServerUserAccountOrder struct {
	// The field to order user accounts by. (Required.)
	Field EnterpriseServerUserAccountOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// EnterpriseServerUserAccountsUploadOrder represents ordering options for Enterprise Server user accounts upload connections.
type EnterpriseServerUserAccountsUploadOrder struct {
	// The field to order user accounts uploads by. (Required.)
	Field EnterpriseServerUserAccountsUploadOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// Environments represents ordering options for environments.
type Environments struct {
	// The field to order environments by. (Required.)
	Field EnvironmentOrderField `json:"field"`
	// The direction in which to order environments by the specified field. (Required.)
	Direction OrderDirection `json:"direction"`
}

// FileAddition represents a command to add a file at the given path with the given contents as part of a commit. Any existing file at that that path will be replaced.
type FileAddition struct {
	// The path in the repository where the file will be located. (Required.)
	Path String `json:"path"`
	// The base64 encoded contents of the file. (Required.)
	Contents Base64String `json:"contents"`
}

// FileChanges represents a description of a set of changes to a file tree to be made as part of a git commit, modeled as zero or more file `additions` and zero or more file `deletions`. Both fields are optional; omitting both will produce a commit with no file changes. `deletions` and `additions` describe changes to files identified by their path in the git tree using unix-style path separators, i.e. `/`. The root of a git tree is an empty string, so paths are not slash-prefixed. `path` values must be unique across all `additions` and `deletions` provided. Any duplication will result in a validation error. ### Encoding File contents must be provided in full for each `FileAddition`. The `contents` of a `FileAddition` must be encoded using RFC 4648 compliant base64, i.e. correct padding is required and no characters outside the standard alphabet may be used. Invalid base64 encoding will be rejected with a validation error. The encoded contents may be binary. For text files, no assumptions are made about the character encoding of the file contents (after base64 decoding). No charset transcoding or line-ending normalization will be performed; it is the client's responsibility to manage the character encoding of files they provide. However, for maximum compatibility we recommend using UTF-8 encoding and ensuring that all files in a repository use a consistent line-ending convention (`\n` or `\r\n`), and that all files end with a newline. ### Modeling file changes Each of the the five types of conceptual changes that can be made in a git commit can be described using the `FileChanges` type as follows: 1. New file addition: create file `hello world\n` at path `docs/README.txt`: { "additions" [ { "path": "docs/README.txt", "contents": base64encode("hello world\n") } ] } 2. Existing file modification: change existing `docs/README.txt` to have new content `new content here\n`: { "additions" [ { "path": "docs/README.txt", "contents": base64encode("new content here\n") } ] } 3. Existing file deletion: remove existing file `docs/README.txt`. Note that the path is required to exist -- specifying a path that does not exist on the given branch will abort the commit and return an error. { "deletions" [ { "path": "docs/README.txt" } ] } 4. File rename with no changes: rename `docs/README.txt` with previous content `hello world\n` to the same content at `newdocs/README.txt`: { "deletions" [ { "path": "docs/README.txt", } ], "additions" [ { "path": "newdocs/README.txt", "contents": base64encode("hello world\n") } ] } 5. File rename with changes: rename `docs/README.txt` with previous content `hello world\n` to a file at path `newdocs/README.txt` with content `new contents\n`: { "deletions" [ { "path": "docs/README.txt", } ], "additions" [ { "path": "newdocs/README.txt", "contents": base64encode("new contents\n") } ] }.
type FileChanges struct {

	// Files to delete. (Optional.)
	Deletions *[]FileDeletion `json:"deletions,omitempty"`
	// File to add or change. (Optional.)
	Additions *[]FileAddition `json:"additions,omitempty"`
}

// FileDeletion represents a command to delete the file at the given path as part of a commit.
type FileDeletion struct {
	// The path to delete. (Required.)
	Path String `json:"path"`
}

// FileExtensionRestrictionParametersInput represents prevent commits that include files with specified file extensions from being pushed to the commit graph. NOTE: This rule is in beta and subject to change.
type FileExtensionRestrictionParametersInput struct {
	// The file extensions that are restricted from being pushed to the commit graph. (Required.)
	RestrictedFileExtensions []String `json:"restrictedFileExtensions"`
}

// FilePathRestrictionParametersInput represents prevent commits that include changes in specified file paths from being pushed to the commit graph. NOTE: This rule is in beta and subject to change.
type FilePathRestrictionParametersInput struct {
	// The file paths that are restricted from being pushed to the commit graph. (Required.)
	RestrictedFilePaths []String `json:"restrictedFilePaths"`
}

// FollowOrganizationInput is an autogenerated input type of FollowOrganization.
type FollowOrganizationInput struct {
	// ID of the organization to follow. (Required.)
	OrganizationID ID `json:"organizationId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// FollowUserInput is an autogenerated input type of FollowUser.
type FollowUserInput struct {
	// ID of the user to follow. (Required.)
	UserID ID `json:"userId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// GistOrder represents ordering options for gist connections.
type GistOrder struct {
	// The field to order repositories by. (Required.)
	Field GistOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// GrantEnterpriseOrganizationsMigratorRoleInput is an autogenerated input type of GrantEnterpriseOrganizationsMigratorRole.
type GrantEnterpriseOrganizationsMigratorRoleInput struct {
	// The ID of the enterprise to which all organizations managed by it will be granted the migrator role. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The login of the user to grant the migrator role. (Required.)
	Login String `json:"login"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// GrantMigratorRoleInput is an autogenerated input type of GrantMigratorRole.
type GrantMigratorRoleInput struct {
	// The ID of the organization that the user/team belongs to. (Required.)
	OrganizationID ID `json:"organizationId"`
	// The user login or Team slug to grant the migrator role. (Required.)
	Actor String `json:"actor"`
	// Specifies the type of the actor, can be either USER or TEAM. (Required.)
	ActorType ActorType `json:"actorType"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// ImportProjectInput is an autogenerated input type of ImportProject.
type ImportProjectInput struct {
	// The name of the Organization or User to create the Project under. (Required.)
	OwnerName String `json:"ownerName"`
	// The name of Project. (Required.)
	Name String `json:"name"`
	// A list of columns containing issues and pull requests. (Required.)
	ColumnImports []ProjectColumnImport `json:"columnImports"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The description of Project. (Optional.)
	Body *String `json:"body,omitempty"`
	// Whether the Project is public or not. (Optional.)
	Public *Boolean `json:"public,omitempty"`
}

// InviteEnterpriseAdminInput is an autogenerated input type of InviteEnterpriseAdmin.
type InviteEnterpriseAdminInput struct {
	// The ID of the enterprise to which you want to invite an administrator. (Required.)
	EnterpriseID ID `json:"enterpriseId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The login of a user to invite as an administrator. (Optional.)
	Invitee *String `json:"invitee,omitempty"`
	// The email of the person to invite as an administrator. (Optional.)
	Email *String `json:"email,omitempty"`
	// The role of the administrator. (Optional.)
	Role *EnterpriseAdministratorRole `json:"role,omitempty"`
}

// IpAllowListEntryOrder represents ordering options for IP allow list entry connections.
type IpAllowListEntryOrder struct {
	// The field to order IP allow list entries by. (Required.)
	Field IpAllowListEntryOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// IssueCommentOrder represents ways in which lists of issue comments can be ordered upon return.
type IssueCommentOrder struct {
	// The field in which to order issue comments by. (Required.)
	Field IssueCommentOrderField `json:"field"`
	// The direction in which to order issue comments by the specified field. (Required.)
	Direction OrderDirection `json:"direction"`
}

// IssueFilters represents ways in which to filter lists of issues.
type IssueFilters struct {

	// List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user. (Optional.)
	Assignee *String `json:"assignee,omitempty"`
	// List issues created by given name. (Optional.)
	CreatedBy *String `json:"createdBy,omitempty"`
	// List issues where the list of label names exist on the issue. (Optional.)
	Labels *[]String `json:"labels,omitempty"`
	// List issues where the given name is mentioned in the issue. (Optional.)
	Mentioned *String `json:"mentioned,omitempty"`
	// List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its database ID. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. (Optional.)
	Milestone *String `json:"milestone,omitempty"`
	// List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. (Optional.)
	MilestoneNumber *String `json:"milestoneNumber,omitempty"`
	// List issues that have been updated at or after the given date. (Optional.)
	Since *DateTime `json:"since,omitempty"`
	// List issues filtered by the list of states given. (Optional.)
	States *[]IssueState `json:"states,omitempty"`
	// List issues subscribed to by viewer. (Optional.)
	ViewerSubscribed *Boolean `json:"viewerSubscribed,omitempty"`
}

// IssueOrder represents ways in which lists of issues can be ordered upon return.
type IssueOrder struct {
	// The field in which to order issues by. (Required.)
	Field IssueOrderField `json:"field"`
	// The direction in which to order issues by the specified field. (Required.)
	Direction OrderDirection `json:"direction"`
}

// LabelOrder represents ways in which lists of labels can be ordered upon return.
type LabelOrder struct {
	// The field in which to order labels by. (Required.)
	Field LabelOrderField `json:"field"`
	// The direction in which to order labels by the specified field. (Required.)
	Direction OrderDirection `json:"direction"`
}

// LanguageOrder represents ordering options for language connections.
type LanguageOrder struct {
	// The field to order languages by. (Required.)
	Field LanguageOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// LinkProjectV2ToRepositoryInput is an autogenerated input type of LinkProjectV2ToRepository.
type LinkProjectV2ToRepositoryInput struct {
	// The ID of the project to link to the repository. (Required.)
	ProjectID ID `json:"projectId"`
	// The ID of the repository to link to the project. (Required.)
	RepositoryID ID `json:"repositoryId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// LinkProjectV2ToTeamInput is an autogenerated input type of LinkProjectV2ToTeam.
type LinkProjectV2ToTeamInput struct {
	// The ID of the project to link to the team. (Required.)
	ProjectID ID `json:"projectId"`
	// The ID of the team to link to the project. (Required.)
	TeamID ID `json:"teamId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// LinkRepositoryToProjectInput is an autogenerated input type of LinkRepositoryToProject.
type LinkRepositoryToProjectInput struct {
	// The ID of the Project to link to a Repository. (Required.)
	ProjectID ID `json:"projectId"`
	// The ID of the Repository to link to a Project. (Required.)
	RepositoryID ID `json:"repositoryId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// LockLockableInput is an autogenerated input type of LockLockable.
type LockLockableInput struct {
	// ID of the item to be locked. (Required.)
	LockableID ID `json:"lockableId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// A reason for why the item will be locked. (Optional.)
	LockReason *LockReason `json:"lockReason,omitempty"`
}

// MannequinOrder represents ordering options for mannequins.
type MannequinOrder struct {
	// The field to order mannequins by. (Required.)
	Field MannequinOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// MarkDiscussionCommentAsAnswerInput is an autogenerated input type of MarkDiscussionCommentAsAnswer.
type MarkDiscussionCommentAsAnswerInput struct {
	// The Node ID of the discussion comment to mark as an answer. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// MarkFileAsViewedInput is an autogenerated input type of MarkFileAsViewed.
type MarkFileAsViewedInput struct {
	// The Node ID of the pull request. (Required.)
	PullRequestID ID `json:"pullRequestId"`
	// The path of the file to mark as viewed. (Required.)
	Path String `json:"path"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// MarkNotificationAsDoneInput is an autogenerated input type of MarkNotificationAsDone.
type MarkNotificationAsDoneInput struct {
	// The NotificationThread id. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// MarkProjectV2AsTemplateInput is an autogenerated input type of MarkProjectV2AsTemplate.
type MarkProjectV2AsTemplateInput struct {
	// The ID of the Project to mark as a template. (Required.)
	ProjectID ID `json:"projectId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// MarkPullRequestReadyForReviewInput is an autogenerated input type of MarkPullRequestReadyForReview.
type MarkPullRequestReadyForReviewInput struct {
	// ID of the pull request to be marked as ready for review. (Required.)
	PullRequestID ID `json:"pullRequestId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// MaxFilePathLengthParametersInput represents prevent commits that include file paths that exceed a specified character limit from being pushed to the commit graph. NOTE: This rule is in beta and subject to change.
type MaxFilePathLengthParametersInput struct {
	// The maximum amount of characters allowed in file paths. (Required.)
	MaxFilePathLength Int `json:"maxFilePathLength"`
}

// MaxFileSizeParametersInput represents prevent commits that exceed a specified file size limit from being pushed to the commit. NOTE: This rule is in beta and subject to change.
type MaxFileSizeParametersInput struct {
	// The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS). (Required.)
	MaxFileSize Int `json:"maxFileSize"`
}

// MergeBranchInput is an autogenerated input type of MergeBranch.
type MergeBranchInput struct {
	// The Node ID of the Repository containing the base branch that will be modified. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The name of the base branch that the provided head will be merged into. (Required.)
	Base String `json:"base"`
	// The head to merge into the base branch. This can be a branch name or a commit GitObjectID. (Required.)
	Head String `json:"head"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Message to use for the merge commit. If omitted, a default will be used. (Optional.)
	CommitMessage *String `json:"commitMessage,omitempty"`
	// The email address to associate with this commit. (Optional.)
	AuthorEmail *String `json:"authorEmail,omitempty"`
}

// MergePullRequestInput is an autogenerated input type of MergePullRequest.
type MergePullRequestInput struct {
	// ID of the pull request to be merged. (Required.)
	PullRequestID ID `json:"pullRequestId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Commit headline to use for the merge commit; if omitted, a default message will be used. (Optional.)
	CommitHeadline *String `json:"commitHeadline,omitempty"`
	// Commit body to use for the merge commit; if omitted, a default message will be used. (Optional.)
	CommitBody *String `json:"commitBody,omitempty"`
	// OID that the pull request head ref must match to allow merge; if omitted, no check is performed. (Optional.)
	ExpectedHeadOid *GitObjectID `json:"expectedHeadOid,omitempty"`
	// The merge method to use. If omitted, defaults to 'MERGE'. (Optional.)
	MergeMethod *PullRequestMergeMethod `json:"mergeMethod,omitempty"`
	// The email address to associate with this merge. (Optional.)
	AuthorEmail *String `json:"authorEmail,omitempty"`
}

// MilestoneOrder represents ordering options for milestone connections.
type MilestoneOrder struct {
	// The field to order milestones by. (Required.)
	Field MilestoneOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// MinimizeCommentInput is an autogenerated input type of MinimizeComment.
type MinimizeCommentInput struct {
	// The Node ID of the subject to modify. (Required.)
	SubjectID ID `json:"subjectId"`
	// The classification of comment. (Required.)
	Classifier ReportedContentClassifiers `json:"classifier"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// MoveProjectCardInput is an autogenerated input type of MoveProjectCard.
type MoveProjectCardInput struct {
	// The id of the card to move. (Required.)
	CardID ID `json:"cardId"`
	// The id of the column to move it into. (Required.)
	ColumnID ID `json:"columnId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Place the new card after the card with this id. Pass null to place it at the top. (Optional.)
	AfterCardID *ID `json:"afterCardId,omitempty"`
}

// MoveProjectColumnInput is an autogenerated input type of MoveProjectColumn.
type MoveProjectColumnInput struct {
	// The id of the column to move. (Required.)
	ColumnID ID `json:"columnId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Place the new column after the column with this id. Pass null to place it at the front. (Optional.)
	AfterColumnID *ID `json:"afterColumnId,omitempty"`
}

// OrgEnterpriseOwnerOrder represents ordering options for an organization's enterprise owner connections.
type OrgEnterpriseOwnerOrder struct {
	// The field to order enterprise owners by. (Required.)
	Field OrgEnterpriseOwnerOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// OrganizationOrder represents ordering options for organization connections.
type OrganizationOrder struct {
	// The field to order organizations by. (Required.)
	Field OrganizationOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// PackageFileOrder represents ways in which lists of package files can be ordered upon return.
type PackageFileOrder struct {

	// The field in which to order package files by. (Optional.)
	Field *PackageFileOrderField `json:"field,omitempty"`
	// The direction in which to order package files by the specified field. (Optional.)
	Direction *OrderDirection `json:"direction,omitempty"`
}

// PackageOrder represents ways in which lists of packages can be ordered upon return.
type PackageOrder struct {

	// The field in which to order packages by. (Optional.)
	Field *PackageOrderField `json:"field,omitempty"`
	// The direction in which to order packages by the specified field. (Optional.)
	Direction *OrderDirection `json:"direction,omitempty"`
}

// PackageVersionOrder represents ways in which lists of package versions can be ordered upon return.
type PackageVersionOrder struct {

	// The field in which to order package versions by. (Optional.)
	Field *PackageVersionOrderField `json:"field,omitempty"`
	// The direction in which to order package versions by the specified field. (Optional.)
	Direction *OrderDirection `json:"direction,omitempty"`
}

// PinIssueInput is an autogenerated input type of PinIssue.
type PinIssueInput struct {
	// The ID of the issue to be pinned. (Required.)
	IssueID ID `json:"issueId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// ProjectCardImport represents an issue or PR and its owning repository to be used in a project card.
type ProjectCardImport struct {
	// Repository name with owner (owner/repository). (Required.)
	Repository String `json:"repository"`
	// The issue or pull request number. (Required.)
	Number Int `json:"number"`
}

// ProjectColumnImport represents a project column and a list of its issues and PRs.
type ProjectColumnImport struct {
	// The name of the column. (Required.)
	ColumnName String `json:"columnName"`
	// The position of the column, starting from 0. (Required.)
	Position Int `json:"position"`

	// A list of issues and pull requests in the column. (Optional.)
	Issues *[]ProjectCardImport `json:"issues,omitempty"`
}

// ProjectOrder represents ways in which lists of projects can be ordered upon return.
type ProjectOrder struct {
	// The field in which to order projects by. (Required.)
	Field ProjectOrderField `json:"field"`
	// The direction in which to order projects by the specified field. (Required.)
	Direction OrderDirection `json:"direction"`
}

// ProjectV2Collaborator represents a collaborator to update on a project. Only one of the userId or teamId should be provided.
type ProjectV2Collaborator struct {
	// The role to grant the collaborator. (Required.)
	Role ProjectV2Roles `json:"role"`

	// The ID of the user as a collaborator. (Optional.)
	UserID *ID `json:"userId,omitempty"`
	// The ID of the team as a collaborator. (Optional.)
	TeamID *ID `json:"teamId,omitempty"`
}

// ProjectV2FieldOrder represents ordering options for project v2 field connections.
type ProjectV2FieldOrder struct {
	// The field to order the project v2 fields by. (Required.)
	Field ProjectV2FieldOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// ProjectV2FieldValue represents the values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
type ProjectV2FieldValue struct {

	// The text to set on the field. (Optional.)
	Text *String `json:"text,omitempty"`
	// The number to set on the field. (Optional.)
	Number *Float `json:"number,omitempty"`
	// The ISO 8601 date to set on the field. (Optional.)
	Date *Date `json:"date,omitempty"`
	// The id of the single select option to set on the field. (Optional.)
	SingleSelectOptionID *String `json:"singleSelectOptionId,omitempty"`
	// The id of the iteration to set on the field. (Optional.)
	IterationID *String `json:"iterationId,omitempty"`
}

// ProjectV2Filters represents ways in which to filter lists of projects.
type ProjectV2Filters struct {

	// List project v2 filtered by the state given. (Optional.)
	State *ProjectV2State `json:"state,omitempty"`
}

// ProjectV2ItemFieldValueOrder represents ordering options for project v2 item field value connections.
type ProjectV2ItemFieldValueOrder struct {
	// The field to order the project v2 item field values by. (Required.)
	Field ProjectV2ItemFieldValueOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// ProjectV2ItemOrder represents ordering options for project v2 item connections.
type ProjectV2ItemOrder struct {
	// The field to order the project v2 items by. (Required.)
	Field ProjectV2ItemOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// ProjectV2Order represents ways in which lists of projects can be ordered upon return.
type ProjectV2Order struct {
	// The field in which to order projects by. (Required.)
	Field ProjectV2OrderField `json:"field"`
	// The direction in which to order projects by the specified field. (Required.)
	Direction OrderDirection `json:"direction"`
}

// ProjectV2SingleSelectFieldOptionInput represents represents a single select field option.
type ProjectV2SingleSelectFieldOptionInput struct {
	// The name of the option. (Required.)
	Name String `json:"name"`
	// The display color of the option. (Required.)
	Color ProjectV2SingleSelectFieldOptionColor `json:"color"`
	// The description text of the option. (Required.)
	Description String `json:"description"`
}

// ProjectV2ViewOrder represents ordering options for project v2 view connections.
type ProjectV2ViewOrder struct {
	// The field to order the project v2 views by. (Required.)
	Field ProjectV2ViewOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// ProjectV2WorkflowOrder represents ordering options for project v2 workflows connections.
type ProjectV2WorkflowOrder struct {
	// The field to order the project v2 workflows by. (Required.)
	Field ProjectV2WorkflowsOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// PropertyTargetDefinitionInput represents a property that must match.
type PropertyTargetDefinitionInput struct {
	// The name of the property. (Required.)
	Name String `json:"name"`
	// The values to match for. (Required.)
	PropertyValues []String `json:"propertyValues"`
}

// PublishSponsorsTierInput is an autogenerated input type of PublishSponsorsTier.
type PublishSponsorsTierInput struct {
	// The ID of the draft tier to publish. (Required.)
	TierID ID `json:"tierId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// PullRequestOrder represents ways in which lists of issues can be ordered upon return.
type PullRequestOrder struct {
	// The field in which to order pull requests by. (Required.)
	Field PullRequestOrderField `json:"field"`
	// The direction in which to order pull requests by the specified field. (Required.)
	Direction OrderDirection `json:"direction"`
}

// PullRequestParametersInput represents require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
type PullRequestParametersInput struct {
	// New, reviewable commits pushed will dismiss previous pull request review approvals. (Required.)
	DismissStaleReviewsOnPush Boolean `json:"dismissStaleReviewsOnPush"`
	// Require an approving review in pull requests that modify files that have a designated code owner. (Required.)
	RequireCodeOwnerReview Boolean `json:"requireCodeOwnerReview"`
	// Whether the most recent reviewable push must be approved by someone other than the person who pushed it. (Required.)
	RequireLastPushApproval Boolean `json:"requireLastPushApproval"`
	// The number of approving reviews that are required before a pull request can be merged. (Required.)
	RequiredApprovingReviewCount Int `json:"requiredApprovingReviewCount"`
	// All conversations on code must be resolved before a pull request can be merged. (Required.)
	RequiredReviewThreadResolution Boolean `json:"requiredReviewThreadResolution"`
}

// ReactionOrder represents ways in which lists of reactions can be ordered upon return.
type ReactionOrder struct {
	// The field in which to order reactions by. (Required.)
	Field ReactionOrderField `json:"field"`
	// The direction in which to order reactions by the specified field. (Required.)
	Direction OrderDirection `json:"direction"`
}

// RefNameConditionTargetInput represents parameters to be used for the ref_name condition.
type RefNameConditionTargetInput struct {
	// Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. (Required.)
	Exclude []String `json:"exclude"`
	// Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches. (Required.)
	Include []String `json:"include"`
}

// RefOrder represents ways in which lists of git refs can be ordered upon return.
type RefOrder struct {
	// The field in which to order refs by. (Required.)
	Field RefOrderField `json:"field"`
	// The direction in which to order refs by the specified field. (Required.)
	Direction OrderDirection `json:"direction"`
}

// RefUpdate represents a ref update.
type RefUpdate struct {
	// The fully qualified name of the ref to be update. For example `refs/heads/branch-name`. (Required.)
	Name GitRefname `json:"name"`
	// The value this ref should be updated to. (Required.)
	AfterOid GitObjectID `json:"afterOid"`

	// The value this ref needs to point to before the update. (Optional.)
	BeforeOid *GitObjectID `json:"beforeOid,omitempty"`
	// Force a non fast-forward update. (Optional.)
	Force *Boolean `json:"force,omitempty"`
}

// RegenerateEnterpriseIdentityProviderRecoveryCodesInput is an autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes.
type RegenerateEnterpriseIdentityProviderRecoveryCodesInput struct {
	// The ID of the enterprise on which to set an identity provider. (Required.)
	EnterpriseID ID `json:"enterpriseId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RegenerateVerifiableDomainTokenInput is an autogenerated input type of RegenerateVerifiableDomainToken.
type RegenerateVerifiableDomainTokenInput struct {
	// The ID of the verifiable domain to regenerate the verification token of. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RejectDeploymentsInput is an autogenerated input type of RejectDeployments.
type RejectDeploymentsInput struct {
	// The node ID of the workflow run containing the pending deployments. (Required.)
	WorkflowRunID ID `json:"workflowRunId"`
	// The ids of environments to reject deployments. (Required.)
	EnvironmentIDs []ID `json:"environmentIds"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Optional comment for rejecting deployments. (Optional.)
	Comment *String `json:"comment,omitempty"`
}

// ReleaseOrder represents ways in which lists of releases can be ordered upon return.
type ReleaseOrder struct {
	// The field in which to order releases by. (Required.)
	Field ReleaseOrderField `json:"field"`
	// The direction in which to order releases by the specified field. (Required.)
	Direction OrderDirection `json:"direction"`
}

// RemoveAssigneesFromAssignableInput is an autogenerated input type of RemoveAssigneesFromAssignable.
type RemoveAssigneesFromAssignableInput struct {
	// The id of the assignable object to remove assignees from. (Required.)
	AssignableID ID `json:"assignableId"`
	// The id of users to remove as assignees. (Required.)
	AssigneeIDs []ID `json:"assigneeIds"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RemoveEnterpriseAdminInput is an autogenerated input type of RemoveEnterpriseAdmin.
type RemoveEnterpriseAdminInput struct {
	// The Enterprise ID from which to remove the administrator. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The login of the user to remove as an administrator. (Required.)
	Login String `json:"login"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RemoveEnterpriseIdentityProviderInput is an autogenerated input type of RemoveEnterpriseIdentityProvider.
type RemoveEnterpriseIdentityProviderInput struct {
	// The ID of the enterprise from which to remove the identity provider. (Required.)
	EnterpriseID ID `json:"enterpriseId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RemoveEnterpriseMemberInput is an autogenerated input type of RemoveEnterpriseMember.
type RemoveEnterpriseMemberInput struct {
	// The ID of the enterprise from which the user should be removed. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The ID of the user to remove from the enterprise. (Required.)
	UserID ID `json:"userId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RemoveEnterpriseOrganizationInput is an autogenerated input type of RemoveEnterpriseOrganization.
type RemoveEnterpriseOrganizationInput struct {
	// The ID of the enterprise from which the organization should be removed. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The ID of the organization to remove from the enterprise. (Required.)
	OrganizationID ID `json:"organizationId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RemoveEnterpriseSupportEntitlementInput is an autogenerated input type of RemoveEnterpriseSupportEntitlement.
type RemoveEnterpriseSupportEntitlementInput struct {
	// The ID of the Enterprise which the admin belongs to. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The login of a member who will lose the support entitlement. (Required.)
	Login String `json:"login"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RemoveLabelsFromLabelableInput is an autogenerated input type of RemoveLabelsFromLabelable.
type RemoveLabelsFromLabelableInput struct {
	// The id of the Labelable to remove labels from. (Required.)
	LabelableID ID `json:"labelableId"`
	// The ids of labels to remove. (Required.)
	LabelIDs []ID `json:"labelIds"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RemoveOutsideCollaboratorInput is an autogenerated input type of RemoveOutsideCollaborator.
type RemoveOutsideCollaboratorInput struct {
	// The ID of the outside collaborator to remove. (Required.)
	UserID ID `json:"userId"`
	// The ID of the organization to remove the outside collaborator from. (Required.)
	OrganizationID ID `json:"organizationId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RemoveReactionInput is an autogenerated input type of RemoveReaction.
type RemoveReactionInput struct {
	// The Node ID of the subject to modify. (Required.)
	SubjectID ID `json:"subjectId"`
	// The name of the emoji reaction to remove. (Required.)
	Content ReactionContent `json:"content"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RemoveStarInput is an autogenerated input type of RemoveStar.
type RemoveStarInput struct {
	// The Starrable ID to unstar. (Required.)
	StarrableID ID `json:"starrableId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RemoveUpvoteInput is an autogenerated input type of RemoveUpvote.
type RemoveUpvoteInput struct {
	// The Node ID of the discussion or comment to remove upvote. (Required.)
	SubjectID ID `json:"subjectId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// ReopenDiscussionInput is an autogenerated input type of ReopenDiscussion.
type ReopenDiscussionInput struct {
	// ID of the discussion to be reopened. (Required.)
	DiscussionID ID `json:"discussionId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// ReopenIssueInput is an autogenerated input type of ReopenIssue.
type ReopenIssueInput struct {
	// ID of the issue to be opened. (Required.)
	IssueID ID `json:"issueId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// ReopenPullRequestInput is an autogenerated input type of ReopenPullRequest.
type ReopenPullRequestInput struct {
	// ID of the pull request to be reopened. (Required.)
	PullRequestID ID `json:"pullRequestId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RepositoryIdConditionTargetInput represents parameters to be used for the repository_id condition.
type RepositoryIdConditionTargetInput struct {
	// One of these repo IDs must match the repo. (Required.)
	RepositoryIDs []ID `json:"repositoryIds"`
}

// RepositoryInvitationOrder represents ordering options for repository invitation connections.
type RepositoryInvitationOrder struct {
	// The field to order repository invitations by. (Required.)
	Field RepositoryInvitationOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// RepositoryMigrationOrder represents ordering options for repository migrations.
type RepositoryMigrationOrder struct {
	// The field to order repository migrations by. (Required.)
	Field RepositoryMigrationOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction RepositoryMigrationOrderDirection `json:"direction"`
}

// RepositoryNameConditionTargetInput represents parameters to be used for the repository_name condition.
type RepositoryNameConditionTargetInput struct {
	// Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. (Required.)
	Exclude []String `json:"exclude"`
	// Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories. (Required.)
	Include []String `json:"include"`

	// Target changes that match these patterns will be prevented except by those with bypass permissions. (Optional.)
	Protected *Boolean `json:"protected,omitempty"`
}

// RepositoryOrder represents ordering options for repository connections.
type RepositoryOrder struct {
	// The field to order repositories by. (Required.)
	Field RepositoryOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// RepositoryPropertyConditionTargetInput represents parameters to be used for the repository_property condition.
type RepositoryPropertyConditionTargetInput struct {
	// Array of repository properties that must not match. (Required.)
	Exclude []PropertyTargetDefinitionInput `json:"exclude"`
	// Array of repository properties that must match. (Required.)
	Include []PropertyTargetDefinitionInput `json:"include"`
}

// RepositoryRuleConditionsInput specifies the conditions required for a ruleset to evaluate.
type RepositoryRuleConditionsInput struct {

	// Configuration for the ref_name condition. (Optional.)
	RefName *RefNameConditionTargetInput `json:"refName,omitempty"`
	// Configuration for the repository_name condition. (Optional.)
	RepositoryName *RepositoryNameConditionTargetInput `json:"repositoryName,omitempty"`
	// Configuration for the repository_id condition. (Optional.)
	RepositoryID *RepositoryIdConditionTargetInput `json:"repositoryId,omitempty"`
	// Configuration for the repository_property condition. (Optional.)
	RepositoryProperty *RepositoryPropertyConditionTargetInput `json:"repositoryProperty,omitempty"`
}

// RepositoryRuleInput specifies the attributes for a new or updated rule.
type RepositoryRuleInput struct {
	// The type of rule to create. (Required.)
	Type RepositoryRuleType `json:"type"`

	// Optional ID of this rule when updating. (Optional.)
	ID *ID `json:"id,omitempty"`
	// The parameters for the rule. (Optional.)
	Parameters *RuleParametersInput `json:"parameters,omitempty"`
}

// RepositoryRuleOrder represents ordering options for repository rules.
type RepositoryRuleOrder struct {
	// The field to order repository rules by. (Required.)
	Field RepositoryRuleOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// RepositoryRulesetBypassActorInput specifies the attributes for a new or updated ruleset bypass actor. Only one of `actor_id`, `repository_role_database_id`, `organization_admin`, or `deploy_key` should be specified.
type RepositoryRulesetBypassActorInput struct {
	// The bypass mode for this actor. (Required.)
	BypassMode RepositoryRulesetBypassActorBypassMode `json:"bypassMode"`

	// For Team and Integration bypasses, the Team or Integration ID. (Optional.)
	ActorID *ID `json:"actorId,omitempty"`
	// For role bypasses, the role database ID. (Optional.)
	RepositoryRoleDatabaseID *Int `json:"repositoryRoleDatabaseId,omitempty"`
	// For organization owner bypasses, true. (Optional.)
	OrganizationAdmin *Boolean `json:"organizationAdmin,omitempty"`
	// For deploy key bypasses, true. Can only use ALWAYS as the bypass mode. (Optional.)
	DeployKey *Boolean `json:"deployKey,omitempty"`
}

// RequestReviewsInput is an autogenerated input type of RequestReviews.
type RequestReviewsInput struct {
	// The Node ID of the pull request to modify. (Required.)
	PullRequestID ID `json:"pullRequestId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The Node IDs of the user to request. (Optional.)
	UserIDs *[]ID `json:"userIds,omitempty"`
	// The Node IDs of the team to request. (Optional.)
	TeamIDs *[]ID `json:"teamIds,omitempty"`
	// Add users to the set rather than replace. (Optional.)
	Union *Boolean `json:"union,omitempty"`
}

// RequiredDeploymentsParametersInput represents choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
type RequiredDeploymentsParametersInput struct {
	// The environments that must be successfully deployed to before branches can be merged. (Required.)
	RequiredDeploymentEnvironments []String `json:"requiredDeploymentEnvironments"`
}

// RequiredStatusCheckInput specifies the attributes for a new or updated required status check.
type RequiredStatusCheckInput struct {
	// Status check context that must pass for commits to be accepted to the matching branch. (Required.)
	Context String `json:"context"`

	// The ID of the App that must set the status in order for it to be accepted. Omit this value to use whichever app has recently been setting this status, or use "any" to allow any app to set the status. (Optional.)
	AppID *ID `json:"appId,omitempty"`
}

// RequiredStatusChecksParametersInput represents choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
type RequiredStatusChecksParametersInput struct {
	// Status checks that are required. (Required.)
	RequiredStatusChecks []StatusCheckConfigurationInput `json:"requiredStatusChecks"`
	// Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. (Required.)
	StrictRequiredStatusChecksPolicy Boolean `json:"strictRequiredStatusChecksPolicy"`
}

// RerequestCheckSuiteInput is an autogenerated input type of RerequestCheckSuite.
type RerequestCheckSuiteInput struct {
	// The Node ID of the repository. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The Node ID of the check suite. (Required.)
	CheckSuiteID ID `json:"checkSuiteId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// ResolveReviewThreadInput is an autogenerated input type of ResolveReviewThread.
type ResolveReviewThreadInput struct {
	// The ID of the thread to resolve. (Required.)
	ThreadID ID `json:"threadId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RetireSponsorsTierInput is an autogenerated input type of RetireSponsorsTier.
type RetireSponsorsTierInput struct {
	// The ID of the published tier to retire. (Required.)
	TierID ID `json:"tierId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RevertPullRequestInput is an autogenerated input type of RevertPullRequest.
type RevertPullRequestInput struct {
	// The ID of the pull request to revert. (Required.)
	PullRequestID ID `json:"pullRequestId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The title of the revert pull request. (Optional.)
	Title *String `json:"title,omitempty"`
	// The description of the revert pull request. (Optional.)
	Body *String `json:"body,omitempty"`
	// Indicates whether the revert pull request should be a draft. (Optional.)
	Draft *Boolean `json:"draft,omitempty"`
}

// RevokeEnterpriseOrganizationsMigratorRoleInput is an autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole.
type RevokeEnterpriseOrganizationsMigratorRoleInput struct {
	// The ID of the enterprise to which all organizations managed by it will be granted the migrator role. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The login of the user to revoke the migrator role. (Required.)
	Login String `json:"login"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RevokeMigratorRoleInput is an autogenerated input type of RevokeMigratorRole.
type RevokeMigratorRoleInput struct {
	// The ID of the organization that the user/team belongs to. (Required.)
	OrganizationID ID `json:"organizationId"`
	// The user login or Team slug to revoke the migrator role from. (Required.)
	Actor String `json:"actor"`
	// Specifies the type of the actor, can be either USER or TEAM. (Required.)
	ActorType ActorType `json:"actorType"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// RuleParametersInput specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified.
type RuleParametersInput struct {

	// Parameters used for the `update` rule type. (Optional.)
	Update *UpdateParametersInput `json:"update,omitempty"`
	// Parameters used for the `required_deployments` rule type. (Optional.)
	RequiredDeployments *RequiredDeploymentsParametersInput `json:"requiredDeployments,omitempty"`
	// Parameters used for the `pull_request` rule type. (Optional.)
	PullRequest *PullRequestParametersInput `json:"pullRequest,omitempty"`
	// Parameters used for the `required_status_checks` rule type. (Optional.)
	RequiredStatusChecks *RequiredStatusChecksParametersInput `json:"requiredStatusChecks,omitempty"`
	// Parameters used for the `commit_message_pattern` rule type. (Optional.)
	CommitMessagePattern *CommitMessagePatternParametersInput `json:"commitMessagePattern,omitempty"`
	// Parameters used for the `commit_author_email_pattern` rule type. (Optional.)
	CommitAuthorEmailPattern *CommitAuthorEmailPatternParametersInput `json:"commitAuthorEmailPattern,omitempty"`
	// Parameters used for the `committer_email_pattern` rule type. (Optional.)
	CommitterEmailPattern *CommitterEmailPatternParametersInput `json:"committerEmailPattern,omitempty"`
	// Parameters used for the `branch_name_pattern` rule type. (Optional.)
	BranchNamePattern *BranchNamePatternParametersInput `json:"branchNamePattern,omitempty"`
	// Parameters used for the `tag_name_pattern` rule type. (Optional.)
	TagNamePattern *TagNamePatternParametersInput `json:"tagNamePattern,omitempty"`
	// Parameters used for the `file_path_restriction` rule type. (Optional.)
	FilePathRestriction *FilePathRestrictionParametersInput `json:"filePathRestriction,omitempty"`
	// Parameters used for the `max_file_path_length` rule type. (Optional.)
	MaxFilePathLength *MaxFilePathLengthParametersInput `json:"maxFilePathLength,omitempty"`
	// Parameters used for the `file_extension_restriction` rule type. (Optional.)
	FileExtensionRestriction *FileExtensionRestrictionParametersInput `json:"fileExtensionRestriction,omitempty"`
	// Parameters used for the `max_file_size` rule type. (Optional.)
	MaxFileSize *MaxFileSizeParametersInput `json:"maxFileSize,omitempty"`
	// Parameters used for the `workflows` rule type. (Optional.)
	Workflows *WorkflowsParametersInput `json:"workflows,omitempty"`
}

// SavedReplyOrder represents ordering options for saved reply connections.
type SavedReplyOrder struct {
	// The field to order saved replies by. (Required.)
	Field SavedReplyOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// SecurityAdvisoryIdentifierFilter represents an advisory identifier to filter results on.
type SecurityAdvisoryIdentifierFilter struct {
	// The identifier type. (Required.)
	Type SecurityAdvisoryIdentifierType `json:"type"`
	// The identifier string. Supports exact or partial matching. (Required.)
	Value String `json:"value"`
}

// SecurityAdvisoryOrder represents ordering options for security advisory connections.
type SecurityAdvisoryOrder struct {
	// The field to order security advisories by. (Required.)
	Field SecurityAdvisoryOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// SecurityVulnerabilityOrder represents ordering options for security vulnerability connections.
type SecurityVulnerabilityOrder struct {
	// The field to order security vulnerabilities by. (Required.)
	Field SecurityVulnerabilityOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// SetEnterpriseIdentityProviderInput is an autogenerated input type of SetEnterpriseIdentityProvider.
type SetEnterpriseIdentityProviderInput struct {
	// The ID of the enterprise on which to set an identity provider. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The URL endpoint for the identity provider's SAML SSO. (Required.)
	SsoURL URI `json:"ssoUrl"`
	// The x509 certificate used by the identity provider to sign assertions and responses. (Required.)
	IdpCertificate String `json:"idpCertificate"`
	// The signature algorithm used to sign SAML requests for the identity provider. (Required.)
	SignatureMethod SamlSignatureAlgorithm `json:"signatureMethod"`
	// The digest algorithm used to sign SAML requests for the identity provider. (Required.)
	DigestMethod SamlDigestAlgorithm `json:"digestMethod"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The Issuer Entity ID for the SAML identity provider. (Optional.)
	Issuer *String `json:"issuer,omitempty"`
}

// SetOrganizationInteractionLimitInput is an autogenerated input type of SetOrganizationInteractionLimit.
type SetOrganizationInteractionLimitInput struct {
	// The ID of the organization to set a limit for. (Required.)
	OrganizationID ID `json:"organizationId"`
	// The limit to set. (Required.)
	Limit RepositoryInteractionLimit `json:"limit"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// When this limit should expire. (Optional.)
	Expiry *RepositoryInteractionLimitExpiry `json:"expiry,omitempty"`
}

// SetRepositoryInteractionLimitInput is an autogenerated input type of SetRepositoryInteractionLimit.
type SetRepositoryInteractionLimitInput struct {
	// The ID of the repository to set a limit for. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The limit to set. (Required.)
	Limit RepositoryInteractionLimit `json:"limit"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// When this limit should expire. (Optional.)
	Expiry *RepositoryInteractionLimitExpiry `json:"expiry,omitempty"`
}

// SetUserInteractionLimitInput is an autogenerated input type of SetUserInteractionLimit.
type SetUserInteractionLimitInput struct {
	// The ID of the user to set a limit for. (Required.)
	UserID ID `json:"userId"`
	// The limit to set. (Required.)
	Limit RepositoryInteractionLimit `json:"limit"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// When this limit should expire. (Optional.)
	Expiry *RepositoryInteractionLimitExpiry `json:"expiry,omitempty"`
}

// SponsorAndLifetimeValueOrder represents ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors.
type SponsorAndLifetimeValueOrder struct {
	// The field to order results by. (Required.)
	Field SponsorAndLifetimeValueOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// SponsorOrder represents ordering options for connections to get sponsor entities for GitHub Sponsors.
type SponsorOrder struct {
	// The field to order sponsor entities by. (Required.)
	Field SponsorOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// SponsorableOrder represents ordering options for connections to get sponsorable entities for GitHub Sponsors.
type SponsorableOrder struct {
	// The field to order sponsorable entities by. (Required.)
	Field SponsorableOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// SponsorsActivityOrder represents ordering options for GitHub Sponsors activity connections.
type SponsorsActivityOrder struct {
	// The field to order activity by. (Required.)
	Field SponsorsActivityOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// SponsorsTierOrder represents ordering options for Sponsors tiers connections.
type SponsorsTierOrder struct {
	// The field to order tiers by. (Required.)
	Field SponsorsTierOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// SponsorshipNewsletterOrder represents ordering options for sponsorship newsletter connections.
type SponsorshipNewsletterOrder struct {
	// The field to order sponsorship newsletters by. (Required.)
	Field SponsorshipNewsletterOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// SponsorshipOrder represents ordering options for sponsorship connections.
type SponsorshipOrder struct {
	// The field to order sponsorship by. (Required.)
	Field SponsorshipOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// StarOrder represents ways in which star connections can be ordered.
type StarOrder struct {
	// The field in which to order nodes by. (Required.)
	Field StarOrderField `json:"field"`
	// The direction in which to order nodes. (Required.)
	Direction OrderDirection `json:"direction"`
}

// StartOrganizationMigrationInput is an autogenerated input type of StartOrganizationMigration.
type StartOrganizationMigrationInput struct {
	// The URL of the organization to migrate. (Required.)
	SourceOrgURL URI `json:"sourceOrgUrl"`
	// The name of the target organization. (Required.)
	TargetOrgName String `json:"targetOrgName"`
	// The ID of the enterprise the target organization belongs to. (Required.)
	TargetEnterpriseID ID `json:"targetEnterpriseId"`
	// The migration source access token. (Required.)
	SourceAccessToken String `json:"sourceAccessToken"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// StartRepositoryMigrationInput is an autogenerated input type of StartRepositoryMigration.
type StartRepositoryMigrationInput struct {
	// The ID of the migration source. (Required.)
	SourceID ID `json:"sourceId"`
	// The ID of the organization that will own the imported repository. (Required.)
	OwnerID ID `json:"ownerId"`
	// The URL of the source repository. (Required.)
	SourceRepositoryURL URI `json:"sourceRepositoryUrl"`
	// The name of the imported repository. (Required.)
	RepositoryName String `json:"repositoryName"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Whether to continue the migration on error. Defaults to `true`. (Optional.)
	ContinueOnError *Boolean `json:"continueOnError,omitempty"`
	// The signed URL to access the user-uploaded git archive. (Optional.)
	GitArchiveURL *String `json:"gitArchiveUrl,omitempty"`
	// The signed URL to access the user-uploaded metadata archive. (Optional.)
	MetadataArchiveURL *String `json:"metadataArchiveUrl,omitempty"`
	// The migration source access token. (Optional.)
	AccessToken *String `json:"accessToken,omitempty"`
	// The GitHub personal access token of the user importing to the target repository. (Optional.)
	GitHubPat *String `json:"githubPat,omitempty"`
	// Whether to skip migrating releases for the repository. (Optional.)
	SkipReleases *Boolean `json:"skipReleases,omitempty"`
	// The visibility of the imported repository. (Optional.)
	TargetRepoVisibility *String `json:"targetRepoVisibility,omitempty"`
	// Whether to lock the source repository. (Optional.)
	LockSource *Boolean `json:"lockSource,omitempty"`
}

// StatusCheckConfigurationInput represents required status check.
type StatusCheckConfigurationInput struct {
	// The status check context name that must be present on the commit. (Required.)
	Context String `json:"context"`

	// The optional integration ID that this status check must originate from. (Optional.)
	IntegrationID *Int `json:"integrationId,omitempty"`
}

// SubmitPullRequestReviewInput is an autogenerated input type of SubmitPullRequestReview.
type SubmitPullRequestReviewInput struct {
	// The event to send to the Pull Request Review. (Required.)
	Event PullRequestReviewEvent `json:"event"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The Pull Request ID to submit any pending reviews. (Optional.)
	PullRequestID *ID `json:"pullRequestId,omitempty"`
	// The Pull Request Review ID to submit. (Optional.)
	PullRequestReviewID *ID `json:"pullRequestReviewId,omitempty"`
	// The text field to set on the Pull Request Review. (Optional.)
	Body *String `json:"body,omitempty"`
}

// TagNamePatternParametersInput represents parameters to be used for the tag_name_pattern rule.
type TagNamePatternParametersInput struct {
	// The operator to use for matching. (Required.)
	Operator String `json:"operator"`
	// The pattern to match with. (Required.)
	Pattern String `json:"pattern"`

	// How this rule will appear to users. (Optional.)
	Name *String `json:"name,omitempty"`
	// If true, the rule will fail if the pattern matches. (Optional.)
	Negate *Boolean `json:"negate,omitempty"`
}

// TeamDiscussionCommentOrder represents ways in which team discussion comment connections can be ordered.
type TeamDiscussionCommentOrder struct {
	// The field by which to order nodes. (Required.)
	Field TeamDiscussionCommentOrderField `json:"field"`
	// The direction in which to order nodes. (Required.)
	Direction OrderDirection `json:"direction"`
}

// TeamDiscussionOrder represents ways in which team discussion connections can be ordered.
type TeamDiscussionOrder struct {
	// The field by which to order nodes. (Required.)
	Field TeamDiscussionOrderField `json:"field"`
	// The direction in which to order nodes. (Required.)
	Direction OrderDirection `json:"direction"`
}

// TeamMemberOrder represents ordering options for team member connections.
type TeamMemberOrder struct {
	// The field to order team members by. (Required.)
	Field TeamMemberOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// TeamOrder represents ways in which team connections can be ordered.
type TeamOrder struct {
	// The field in which to order nodes by. (Required.)
	Field TeamOrderField `json:"field"`
	// The direction in which to order nodes. (Required.)
	Direction OrderDirection `json:"direction"`
}

// TeamRepositoryOrder represents ordering options for team repository connections.
type TeamRepositoryOrder struct {
	// The field to order repositories by. (Required.)
	Field TeamRepositoryOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// TransferEnterpriseOrganizationInput is an autogenerated input type of TransferEnterpriseOrganization.
type TransferEnterpriseOrganizationInput struct {
	// The ID of the organization to transfer. (Required.)
	OrganizationID ID `json:"organizationId"`
	// The ID of the enterprise where the organization should be transferred. (Required.)
	DestinationEnterpriseID ID `json:"destinationEnterpriseId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// TransferIssueInput is an autogenerated input type of TransferIssue.
type TransferIssueInput struct {
	// The Node ID of the issue to be transferred. (Required.)
	IssueID ID `json:"issueId"`
	// The Node ID of the repository the issue should be transferred to. (Required.)
	RepositoryID ID `json:"repositoryId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Whether to create labels if they don't exist in the target repository (matched by name). (Optional.)
	CreateLabelsIfMissing *Boolean `json:"createLabelsIfMissing,omitempty"`
}

// UnarchiveProjectV2ItemInput is an autogenerated input type of UnarchiveProjectV2Item.
type UnarchiveProjectV2ItemInput struct {
	// The ID of the Project to archive the item from. (Required.)
	ProjectID ID `json:"projectId"`
	// The ID of the ProjectV2Item to unarchive. (Required.)
	ItemID ID `json:"itemId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnarchiveRepositoryInput is an autogenerated input type of UnarchiveRepository.
type UnarchiveRepositoryInput struct {
	// The ID of the repository to unarchive. (Required.)
	RepositoryID ID `json:"repositoryId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnfollowOrganizationInput is an autogenerated input type of UnfollowOrganization.
type UnfollowOrganizationInput struct {
	// ID of the organization to unfollow. (Required.)
	OrganizationID ID `json:"organizationId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnfollowUserInput is an autogenerated input type of UnfollowUser.
type UnfollowUserInput struct {
	// ID of the user to unfollow. (Required.)
	UserID ID `json:"userId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnlinkProjectV2FromRepositoryInput is an autogenerated input type of UnlinkProjectV2FromRepository.
type UnlinkProjectV2FromRepositoryInput struct {
	// The ID of the project to unlink from the repository. (Required.)
	ProjectID ID `json:"projectId"`
	// The ID of the repository to unlink from the project. (Required.)
	RepositoryID ID `json:"repositoryId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnlinkProjectV2FromTeamInput is an autogenerated input type of UnlinkProjectV2FromTeam.
type UnlinkProjectV2FromTeamInput struct {
	// The ID of the project to unlink from the team. (Required.)
	ProjectID ID `json:"projectId"`
	// The ID of the team to unlink from the project. (Required.)
	TeamID ID `json:"teamId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnlinkRepositoryFromProjectInput is an autogenerated input type of UnlinkRepositoryFromProject.
type UnlinkRepositoryFromProjectInput struct {
	// The ID of the Project linked to the Repository. (Required.)
	ProjectID ID `json:"projectId"`
	// The ID of the Repository linked to the Project. (Required.)
	RepositoryID ID `json:"repositoryId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnlockLockableInput is an autogenerated input type of UnlockLockable.
type UnlockLockableInput struct {
	// ID of the item to be unlocked. (Required.)
	LockableID ID `json:"lockableId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnmarkDiscussionCommentAsAnswerInput is an autogenerated input type of UnmarkDiscussionCommentAsAnswer.
type UnmarkDiscussionCommentAsAnswerInput struct {
	// The Node ID of the discussion comment to unmark as an answer. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnmarkFileAsViewedInput is an autogenerated input type of UnmarkFileAsViewed.
type UnmarkFileAsViewedInput struct {
	// The Node ID of the pull request. (Required.)
	PullRequestID ID `json:"pullRequestId"`
	// The path of the file to mark as unviewed. (Required.)
	Path String `json:"path"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnmarkIssueAsDuplicateInput is an autogenerated input type of UnmarkIssueAsDuplicate.
type UnmarkIssueAsDuplicateInput struct {
	// ID of the issue or pull request currently marked as a duplicate. (Required.)
	DuplicateID ID `json:"duplicateId"`
	// ID of the issue or pull request currently considered canonical/authoritative/original. (Required.)
	CanonicalID ID `json:"canonicalId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnmarkProjectV2AsTemplateInput is an autogenerated input type of UnmarkProjectV2AsTemplate.
type UnmarkProjectV2AsTemplateInput struct {
	// The ID of the Project to unmark as a template. (Required.)
	ProjectID ID `json:"projectId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnminimizeCommentInput is an autogenerated input type of UnminimizeComment.
type UnminimizeCommentInput struct {
	// The Node ID of the subject to modify. (Required.)
	SubjectID ID `json:"subjectId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnpinIssueInput is an autogenerated input type of UnpinIssue.
type UnpinIssueInput struct {
	// The ID of the issue to be unpinned. (Required.)
	IssueID ID `json:"issueId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnresolveReviewThreadInput is an autogenerated input type of UnresolveReviewThread.
type UnresolveReviewThreadInput struct {
	// The ID of the thread to unresolve. (Required.)
	ThreadID ID `json:"threadId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UnsubscribeFromNotificationsInput is an autogenerated input type of UnsubscribeFromNotifications.
type UnsubscribeFromNotificationsInput struct {
	// The NotificationThread IDs of the objects to unsubscribe from. (Required.)
	IDs []ID `json:"ids"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateBranchProtectionRuleInput is an autogenerated input type of UpdateBranchProtectionRule.
type UpdateBranchProtectionRuleInput struct {
	// The global relay id of the branch protection rule to be updated. (Required.)
	BranchProtectionRuleID ID `json:"branchProtectionRuleId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The glob-like pattern used to determine matching branches. (Optional.)
	Pattern *String `json:"pattern,omitempty"`
	// Are approving reviews required to update matching branches. (Optional.)
	RequiresApprovingReviews *Boolean `json:"requiresApprovingReviews,omitempty"`
	// Number of approving reviews required to update matching branches. (Optional.)
	RequiredApprovingReviewCount *Int `json:"requiredApprovingReviewCount,omitempty"`
	// Are commits required to be signed. (Optional.)
	RequiresCommitSignatures *Boolean `json:"requiresCommitSignatures,omitempty"`
	// Are merge commits prohibited from being pushed to this branch. (Optional.)
	RequiresLinearHistory *Boolean `json:"requiresLinearHistory,omitempty"`
	// Is branch creation a protected operation. (Optional.)
	BlocksCreations *Boolean `json:"blocksCreations,omitempty"`
	// Are force pushes allowed on this branch. (Optional.)
	AllowsForcePushes *Boolean `json:"allowsForcePushes,omitempty"`
	// Can this branch be deleted. (Optional.)
	AllowsDeletions *Boolean `json:"allowsDeletions,omitempty"`
	// Can admins override branch protection. (Optional.)
	IsAdminEnforced *Boolean `json:"isAdminEnforced,omitempty"`
	// Are status checks required to update matching branches. (Optional.)
	RequiresStatusChecks *Boolean `json:"requiresStatusChecks,omitempty"`
	// Are branches required to be up to date before merging. (Optional.)
	RequiresStrictStatusChecks *Boolean `json:"requiresStrictStatusChecks,omitempty"`
	// Are reviews from code owners required to update matching branches. (Optional.)
	RequiresCodeOwnerReviews *Boolean `json:"requiresCodeOwnerReviews,omitempty"`
	// Will new commits pushed to matching branches dismiss pull request review approvals. (Optional.)
	DismissesStaleReviews *Boolean `json:"dismissesStaleReviews,omitempty"`
	// Is dismissal of pull request reviews restricted. (Optional.)
	RestrictsReviewDismissals *Boolean `json:"restrictsReviewDismissals,omitempty"`
	// A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. (Optional.)
	ReviewDismissalActorIDs *[]ID `json:"reviewDismissalActorIds,omitempty"`
	// A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. (Optional.)
	BypassPullRequestActorIDs *[]ID `json:"bypassPullRequestActorIds,omitempty"`
	// A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. (Optional.)
	BypassForcePushActorIDs *[]ID `json:"bypassForcePushActorIds,omitempty"`
	// Is pushing to matching branches restricted. (Optional.)
	RestrictsPushes *Boolean `json:"restrictsPushes,omitempty"`
	// A list of User, Team, or App IDs allowed to push to matching branches. (Optional.)
	PushActorIDs *[]ID `json:"pushActorIds,omitempty"`
	// List of required status check contexts that must pass for commits to be accepted to matching branches. (Optional.)
	RequiredStatusCheckContexts *[]String `json:"requiredStatusCheckContexts,omitempty"`
	// The list of required status checks. (Optional.)
	RequiredStatusChecks *[]RequiredStatusCheckInput `json:"requiredStatusChecks,omitempty"`
	// Are successful deployments required before merging. (Optional.)
	RequiresDeployments *Boolean `json:"requiresDeployments,omitempty"`
	// The list of required deployment environments. (Optional.)
	RequiredDeploymentEnvironments *[]String `json:"requiredDeploymentEnvironments,omitempty"`
	// Are conversations required to be resolved before merging. (Optional.)
	RequiresConversationResolution *Boolean `json:"requiresConversationResolution,omitempty"`
	// Whether the most recent push must be approved by someone other than the person who pushed it. (Optional.)
	RequireLastPushApproval *Boolean `json:"requireLastPushApproval,omitempty"`
	// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. (Optional.)
	LockBranch *Boolean `json:"lockBranch,omitempty"`
	// Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. (Optional.)
	LockAllowsFetchAndMerge *Boolean `json:"lockAllowsFetchAndMerge,omitempty"`
}

// UpdateCheckRunInput is an autogenerated input type of UpdateCheckRun.
type UpdateCheckRunInput struct {
	// The node ID of the repository. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The node of the check. (Required.)
	CheckRunID ID `json:"checkRunId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The name of the check. (Optional.)
	Name *String `json:"name,omitempty"`
	// The URL of the integrator's site that has the full details of the check. (Optional.)
	DetailsURL *URI `json:"detailsUrl,omitempty"`
	// A reference for the run on the integrator's system. (Optional.)
	ExternalID *String `json:"externalId,omitempty"`
	// The current status. (Optional.)
	Status *RequestableCheckStatusState `json:"status,omitempty"`
	// The time that the check run began. (Optional.)
	StartedAt *DateTime `json:"startedAt,omitempty"`
	// The final conclusion of the check. (Optional.)
	Conclusion *CheckConclusionState `json:"conclusion,omitempty"`
	// The time that the check run finished. (Optional.)
	CompletedAt *DateTime `json:"completedAt,omitempty"`
	// Descriptive details about the run. (Optional.)
	Output *CheckRunOutput `json:"output,omitempty"`
	// Possible further actions the integrator can perform, which a user may trigger. (Optional.)
	Actions *[]CheckRunAction `json:"actions,omitempty"`
}

// UpdateCheckSuitePreferencesInput is an autogenerated input type of UpdateCheckSuitePreferences.
type UpdateCheckSuitePreferencesInput struct {
	// The Node ID of the repository. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// The check suite preferences to modify. (Required.)
	AutoTriggerPreferences []CheckSuiteAutoTriggerPreference `json:"autoTriggerPreferences"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateDiscussionCommentInput is an autogenerated input type of UpdateDiscussionComment.
type UpdateDiscussionCommentInput struct {
	// The Node ID of the discussion comment to update. (Required.)
	CommentID ID `json:"commentId"`
	// The new contents of the comment body. (Required.)
	Body String `json:"body"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateDiscussionInput is an autogenerated input type of UpdateDiscussion.
type UpdateDiscussionInput struct {
	// The Node ID of the discussion to update. (Required.)
	DiscussionID ID `json:"discussionId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The new discussion title. (Optional.)
	Title *String `json:"title,omitempty"`
	// The new contents of the discussion body. (Optional.)
	Body *String `json:"body,omitempty"`
	// The Node ID of a discussion category within the same repository to change this discussion to. (Optional.)
	CategoryID *ID `json:"categoryId,omitempty"`
}

// UpdateEnterpriseAdministratorRoleInput is an autogenerated input type of UpdateEnterpriseAdministratorRole.
type UpdateEnterpriseAdministratorRoleInput struct {
	// The ID of the Enterprise which the admin belongs to. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The login of a administrator whose role is being changed. (Required.)
	Login String `json:"login"`
	// The new role for the Enterprise administrator. (Required.)
	Role EnterpriseAdministratorRole `json:"role"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput is an autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting.
type UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput struct {
	// The ID of the enterprise on which to set the allow private repository forking setting. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The value for the allow private repository forking setting on the enterprise. (Required.)
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The value for the allow private repository forking policy on the enterprise. (Optional.)
	PolicyValue *EnterpriseAllowPrivateRepositoryForkingPolicyValue `json:"policyValue,omitempty"`
}

// UpdateEnterpriseDefaultRepositoryPermissionSettingInput is an autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting.
type UpdateEnterpriseDefaultRepositoryPermissionSettingInput struct {
	// The ID of the enterprise on which to set the base repository permission setting. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The value for the base repository permission setting on the enterprise. (Required.)
	SettingValue EnterpriseDefaultRepositoryPermissionSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput is an autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting.
type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput struct {
	// The ID of the enterprise on which to set the members can change repository visibility setting. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The value for the members can change repository visibility setting on the enterprise. (Required.)
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateEnterpriseMembersCanCreateRepositoriesSettingInput is an autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting.
type UpdateEnterpriseMembersCanCreateRepositoriesSettingInput struct {
	// The ID of the enterprise on which to set the members can create repositories setting. (Required.)
	EnterpriseID ID `json:"enterpriseId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided. (Optional.)
	SettingValue *EnterpriseMembersCanCreateRepositoriesSettingValue `json:"settingValue,omitempty"`
	// When false, allow member organizations to set their own repository creation member privileges. (Optional.)
	MembersCanCreateRepositoriesPolicyEnabled *Boolean `json:"membersCanCreateRepositoriesPolicyEnabled,omitempty"`
	// Allow members to create public repositories. Defaults to current value. (Optional.)
	MembersCanCreatePublicRepositories *Boolean `json:"membersCanCreatePublicRepositories,omitempty"`
	// Allow members to create private repositories. Defaults to current value. (Optional.)
	MembersCanCreatePrivateRepositories *Boolean `json:"membersCanCreatePrivateRepositories,omitempty"`
	// Allow members to create internal repositories. Defaults to current value. (Optional.)
	MembersCanCreateInternalRepositories *Boolean `json:"membersCanCreateInternalRepositories,omitempty"`
}

// UpdateEnterpriseMembersCanDeleteIssuesSettingInput is an autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting.
type UpdateEnterpriseMembersCanDeleteIssuesSettingInput struct {
	// The ID of the enterprise on which to set the members can delete issues setting. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The value for the members can delete issues setting on the enterprise. (Required.)
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput is an autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting.
type UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput struct {
	// The ID of the enterprise on which to set the members can delete repositories setting. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The value for the members can delete repositories setting on the enterprise. (Required.)
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput is an autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting.
type UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput struct {
	// The ID of the enterprise on which to set the members can invite collaborators setting. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The value for the members can invite collaborators setting on the enterprise. (Required.)
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateEnterpriseMembersCanMakePurchasesSettingInput is an autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting.
type UpdateEnterpriseMembersCanMakePurchasesSettingInput struct {
	// The ID of the enterprise on which to set the members can make purchases setting. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The value for the members can make purchases setting on the enterprise. (Required.)
	SettingValue EnterpriseMembersCanMakePurchasesSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput is an autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting.
type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput struct {
	// The ID of the enterprise on which to set the members can update protected branches setting. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The value for the members can update protected branches setting on the enterprise. (Required.)
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput is an autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting.
type UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput struct {
	// The ID of the enterprise on which to set the members can view dependency insights setting. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The value for the members can view dependency insights setting on the enterprise. (Required.)
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateEnterpriseOrganizationProjectsSettingInput is an autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting.
type UpdateEnterpriseOrganizationProjectsSettingInput struct {
	// The ID of the enterprise on which to set the organization projects setting. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The value for the organization projects setting on the enterprise. (Required.)
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateEnterpriseOwnerOrganizationRoleInput is an autogenerated input type of UpdateEnterpriseOwnerOrganizationRole.
type UpdateEnterpriseOwnerOrganizationRoleInput struct {
	// The ID of the Enterprise which the owner belongs to. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The ID of the organization for membership change. (Required.)
	OrganizationID ID `json:"organizationId"`
	// The role to assume in the organization. (Required.)
	OrganizationRole RoleInOrganization `json:"organizationRole"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateEnterpriseProfileInput is an autogenerated input type of UpdateEnterpriseProfile.
type UpdateEnterpriseProfileInput struct {
	// The Enterprise ID to update. (Required.)
	EnterpriseID ID `json:"enterpriseId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The name of the enterprise. (Optional.)
	Name *String `json:"name,omitempty"`
	// The description of the enterprise. (Optional.)
	Description *String `json:"description,omitempty"`
	// The URL of the enterprise's website. (Optional.)
	WebsiteURL *String `json:"websiteUrl,omitempty"`
	// The location of the enterprise. (Optional.)
	Location *String `json:"location,omitempty"`
}

// UpdateEnterpriseRepositoryProjectsSettingInput is an autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting.
type UpdateEnterpriseRepositoryProjectsSettingInput struct {
	// The ID of the enterprise on which to set the repository projects setting. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The value for the repository projects setting on the enterprise. (Required.)
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateEnterpriseTeamDiscussionsSettingInput is an autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting.
type UpdateEnterpriseTeamDiscussionsSettingInput struct {
	// The ID of the enterprise on which to set the team discussions setting. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The value for the team discussions setting on the enterprise. (Required.)
	SettingValue EnterpriseEnabledDisabledSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput is an autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting.
type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput struct {
	// The ID of the enterprise on which to set the two factor authentication required setting. (Required.)
	EnterpriseID ID `json:"enterpriseId"`
	// The value for the two factor authentication required setting on the enterprise. (Required.)
	SettingValue EnterpriseEnabledSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateEnvironmentInput is an autogenerated input type of UpdateEnvironment.
type UpdateEnvironmentInput struct {
	// The node ID of the environment. (Required.)
	EnvironmentID ID `json:"environmentId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The wait timer in minutes. (Optional.)
	WaitTimer *Int `json:"waitTimer,omitempty"`
	// The ids of users or teams that can approve deployments to this environment. (Optional.)
	Reviewers *[]ID `json:"reviewers,omitempty"`
	// Whether deployments to this environment can be approved by the user who created the deployment. (Optional.)
	PreventSelfReview *Boolean `json:"preventSelfReview,omitempty"`
}

// UpdateIpAllowListEnabledSettingInput is an autogenerated input type of UpdateIpAllowListEnabledSetting.
type UpdateIpAllowListEnabledSettingInput struct {
	// The ID of the owner on which to set the IP allow list enabled setting. (Required.)
	OwnerID ID `json:"ownerId"`
	// The value for the IP allow list enabled setting. (Required.)
	SettingValue IpAllowListEnabledSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateIpAllowListEntryInput is an autogenerated input type of UpdateIpAllowListEntry.
type UpdateIpAllowListEntryInput struct {
	// The ID of the IP allow list entry to update. (Required.)
	IPAllowListEntryID ID `json:"ipAllowListEntryId"`
	// An IP address or range of addresses in CIDR notation. (Required.)
	AllowListValue String `json:"allowListValue"`
	// Whether the IP allow list entry is active when an IP allow list is enabled. (Required.)
	IsActive Boolean `json:"isActive"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// An optional name for the IP allow list entry. (Optional.)
	Name *String `json:"name,omitempty"`
}

// UpdateIpAllowListForInstalledAppsEnabledSettingInput is an autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting.
type UpdateIpAllowListForInstalledAppsEnabledSettingInput struct {
	// The ID of the owner. (Required.)
	OwnerID ID `json:"ownerId"`
	// The value for the IP allow list configuration for installed GitHub Apps setting. (Required.)
	SettingValue IpAllowListForInstalledAppsEnabledSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateIssueCommentInput is an autogenerated input type of UpdateIssueComment.
type UpdateIssueCommentInput struct {
	// The ID of the IssueComment to modify. (Required.)
	ID ID `json:"id"`
	// The updated text of the comment. (Required.)
	Body String `json:"body"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateIssueInput is an autogenerated input type of UpdateIssue.
type UpdateIssueInput struct {
	// The ID of the Issue to modify. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The title for the issue. (Optional.)
	Title *String `json:"title,omitempty"`
	// The body for the issue description. (Optional.)
	Body *String `json:"body,omitempty"`
	// An array of Node IDs of users for this issue. (Optional.)
	AssigneeIDs *[]ID `json:"assigneeIds,omitempty"`
	// The Node ID of the milestone for this issue. (Optional.)
	MilestoneID *ID `json:"milestoneId,omitempty"`
	// An array of Node IDs of labels for this issue. (Optional.)
	LabelIDs *[]ID `json:"labelIds,omitempty"`
	// The desired issue state. (Optional.)
	State *IssueState `json:"state,omitempty"`
	// An array of Node IDs for projects associated with this issue. (Optional.)
	ProjectIDs *[]ID `json:"projectIds,omitempty"`
}

// UpdateLabelInput is an autogenerated input type of UpdateLabel.
type UpdateLabelInput struct {
	// The Node ID of the label to be updated. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// A 6 character hex code, without the leading #, identifying the updated color of the label. (Optional.)
	Color *String `json:"color,omitempty"`
	// A brief description of the label, such as its purpose. (Optional.)
	Description *String `json:"description,omitempty"`
	// The updated name of the label. (Optional.)
	Name *String `json:"name,omitempty"`
}

// UpdateNotificationRestrictionSettingInput is an autogenerated input type of UpdateNotificationRestrictionSetting.
type UpdateNotificationRestrictionSettingInput struct {
	// The ID of the owner on which to set the restrict notifications setting. (Required.)
	OwnerID ID `json:"ownerId"`
	// The value for the restrict notifications setting. (Required.)
	SettingValue NotificationRestrictionSettingValue `json:"settingValue"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateOrganizationAllowPrivateRepositoryForkingSettingInput is an autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting.
type UpdateOrganizationAllowPrivateRepositoryForkingSettingInput struct {
	// The ID of the organization on which to set the allow private repository forking setting. (Required.)
	OrganizationID ID `json:"organizationId"`
	// Enable forking of private repositories in the organization?. (Required.)
	ForkingEnabled Boolean `json:"forkingEnabled"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateOrganizationWebCommitSignoffSettingInput is an autogenerated input type of UpdateOrganizationWebCommitSignoffSetting.
type UpdateOrganizationWebCommitSignoffSettingInput struct {
	// The ID of the organization on which to set the web commit signoff setting. (Required.)
	OrganizationID ID `json:"organizationId"`
	// Enable signoff on web-based commits for repositories in the organization?. (Required.)
	WebCommitSignoffRequired Boolean `json:"webCommitSignoffRequired"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateParametersInput represents only allow users with bypass permission to update matching refs.
type UpdateParametersInput struct {
	// Branch can pull changes from its upstream repository. (Required.)
	UpdateAllowsFetchAndMerge Boolean `json:"updateAllowsFetchAndMerge"`
}

// UpdatePatreonSponsorabilityInput is an autogenerated input type of UpdatePatreonSponsorability.
type UpdatePatreonSponsorabilityInput struct {
	// Whether Patreon tiers should be shown on the GitHub Sponsors profile page, allowing potential sponsors to make their payment through Patreon instead of GitHub. (Required.)
	EnablePatreonSponsorships Boolean `json:"enablePatreonSponsorships"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The username of the organization with the GitHub Sponsors profile, if any. Defaults to the GitHub Sponsors profile for the authenticated user if omitted. (Optional.)
	SponsorableLogin *String `json:"sponsorableLogin,omitempty"`
}

// UpdateProjectCardInput is an autogenerated input type of UpdateProjectCard.
type UpdateProjectCardInput struct {
	// The ProjectCard ID to update. (Required.)
	ProjectCardID ID `json:"projectCardId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Whether or not the ProjectCard should be archived. (Optional.)
	IsArchived *Boolean `json:"isArchived,omitempty"`
	// The note of ProjectCard. (Optional.)
	Note *String `json:"note,omitempty"`
}

// UpdateProjectColumnInput is an autogenerated input type of UpdateProjectColumn.
type UpdateProjectColumnInput struct {
	// The ProjectColumn ID to update. (Required.)
	ProjectColumnID ID `json:"projectColumnId"`
	// The name of project column. (Required.)
	Name String `json:"name"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateProjectInput is an autogenerated input type of UpdateProject.
type UpdateProjectInput struct {
	// The Project ID to update. (Required.)
	ProjectID ID `json:"projectId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The name of project. (Optional.)
	Name *String `json:"name,omitempty"`
	// The description of project. (Optional.)
	Body *String `json:"body,omitempty"`
	// Whether the project is open or closed. (Optional.)
	State *ProjectState `json:"state,omitempty"`
	// Whether the project is public or not. (Optional.)
	Public *Boolean `json:"public,omitempty"`
}

// UpdateProjectV2CollaboratorsInput is an autogenerated input type of UpdateProjectV2Collaborators.
type UpdateProjectV2CollaboratorsInput struct {
	// The ID of the project to update the collaborators for. (Required.)
	ProjectID ID `json:"projectId"`
	// The collaborators to update. (Required.)
	Collaborators []ProjectV2Collaborator `json:"collaborators"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateProjectV2DraftIssueInput is an autogenerated input type of UpdateProjectV2DraftIssue.
type UpdateProjectV2DraftIssueInput struct {
	// The ID of the draft issue to update. (Required.)
	DraftIssueID ID `json:"draftIssueId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The title of the draft issue. (Optional.)
	Title *String `json:"title,omitempty"`
	// The body of the draft issue. (Optional.)
	Body *String `json:"body,omitempty"`
	// The IDs of the assignees of the draft issue. (Optional.)
	AssigneeIDs *[]ID `json:"assigneeIds,omitempty"`
}

// UpdateProjectV2Input is an autogenerated input type of UpdateProjectV2.
type UpdateProjectV2Input struct {
	// The ID of the Project to update. (Required.)
	ProjectID ID `json:"projectId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Set the title of the project. (Optional.)
	Title *String `json:"title,omitempty"`
	// Set the short description of the project. (Optional.)
	ShortDescription *String `json:"shortDescription,omitempty"`
	// Set the readme description of the project. (Optional.)
	Readme *String `json:"readme,omitempty"`
	// Set the project to closed or open. (Optional.)
	Closed *Boolean `json:"closed,omitempty"`
	// Set the project to public or private. (Optional.)
	Public *Boolean `json:"public,omitempty"`
}

// UpdateProjectV2ItemFieldValueInput is an autogenerated input type of UpdateProjectV2ItemFieldValue.
type UpdateProjectV2ItemFieldValueInput struct {
	// The ID of the Project. (Required.)
	ProjectID ID `json:"projectId"`
	// The ID of the item to be updated. (Required.)
	ItemID ID `json:"itemId"`
	// The ID of the field to be updated. (Required.)
	FieldID ID `json:"fieldId"`
	// The value which will be set on the field. (Required.)
	Value ProjectV2FieldValue `json:"value"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateProjectV2ItemPositionInput is an autogenerated input type of UpdateProjectV2ItemPosition.
type UpdateProjectV2ItemPositionInput struct {
	// The ID of the Project. (Required.)
	ProjectID ID `json:"projectId"`
	// The ID of the item to be moved. (Required.)
	ItemID ID `json:"itemId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The ID of the item to position this item after. If omitted or set to null the item will be moved to top. (Optional.)
	AfterID *ID `json:"afterId,omitempty"`
}

// UpdatePullRequestBranchInput is an autogenerated input type of UpdatePullRequestBranch.
type UpdatePullRequestBranchInput struct {
	// The Node ID of the pull request. (Required.)
	PullRequestID ID `json:"pullRequestId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The head ref oid for the upstream branch. (Optional.)
	ExpectedHeadOid *GitObjectID `json:"expectedHeadOid,omitempty"`
	// The update branch method to use. If omitted, defaults to 'MERGE'. (Optional.)
	UpdateMethod *PullRequestBranchUpdateMethod `json:"updateMethod,omitempty"`
}

// UpdatePullRequestInput is an autogenerated input type of UpdatePullRequest.
type UpdatePullRequestInput struct {
	// The Node ID of the pull request. (Required.)
	PullRequestID ID `json:"pullRequestId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. (Optional.)
	BaseRefName *String `json:"baseRefName,omitempty"`
	// The title of the pull request. (Optional.)
	Title *String `json:"title,omitempty"`
	// The contents of the pull request. (Optional.)
	Body *String `json:"body,omitempty"`
	// The target state of the pull request. (Optional.)
	State *PullRequestUpdateState `json:"state,omitempty"`
	// Indicates whether maintainers can modify the pull request. (Optional.)
	MaintainerCanModify *Boolean `json:"maintainerCanModify,omitempty"`
	// An array of Node IDs of users for this pull request. (Optional.)
	AssigneeIDs *[]ID `json:"assigneeIds,omitempty"`
	// The Node ID of the milestone for this pull request. (Optional.)
	MilestoneID *ID `json:"milestoneId,omitempty"`
	// An array of Node IDs of labels for this pull request. (Optional.)
	LabelIDs *[]ID `json:"labelIds,omitempty"`
	// An array of Node IDs for projects associated with this pull request. (Optional.)
	ProjectIDs *[]ID `json:"projectIds,omitempty"`
}

// UpdatePullRequestReviewCommentInput is an autogenerated input type of UpdatePullRequestReviewComment.
type UpdatePullRequestReviewCommentInput struct {
	// The Node ID of the comment to modify. (Required.)
	PullRequestReviewCommentID ID `json:"pullRequestReviewCommentId"`
	// The text of the comment. (Required.)
	Body String `json:"body"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdatePullRequestReviewInput is an autogenerated input type of UpdatePullRequestReview.
type UpdatePullRequestReviewInput struct {
	// The Node ID of the pull request review to modify. (Required.)
	PullRequestReviewID ID `json:"pullRequestReviewId"`
	// The contents of the pull request review body. (Required.)
	Body String `json:"body"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateRefInput is an autogenerated input type of UpdateRef.
type UpdateRefInput struct {
	// The Node ID of the Ref to be updated. (Required.)
	RefID ID `json:"refId"`
	// The GitObjectID that the Ref shall be updated to target. (Required.)
	Oid GitObjectID `json:"oid"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// Permit updates of branch Refs that are not fast-forwards?. (Optional.)
	Force *Boolean `json:"force,omitempty"`
}

// UpdateRefsInput is an autogenerated input type of UpdateRefs.
type UpdateRefsInput struct {
	// The Node ID of the repository. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// A list of ref updates. (Required.)
	RefUpdates []RefUpdate `json:"refUpdates"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateRepositoryInput is an autogenerated input type of UpdateRepository.
type UpdateRepositoryInput struct {
	// The ID of the repository to update. (Required.)
	RepositoryID ID `json:"repositoryId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The new name of the repository. (Optional.)
	Name *String `json:"name,omitempty"`
	// A new description for the repository. Pass an empty string to erase the existing description. (Optional.)
	Description *String `json:"description,omitempty"`
	// Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. (Optional.)
	Template *Boolean `json:"template,omitempty"`
	// The URL for a web page about this repository. Pass an empty string to erase the existing URL. (Optional.)
	HomepageURL *URI `json:"homepageUrl,omitempty"`
	// Indicates if the repository should have the wiki feature enabled. (Optional.)
	HasWikiEnabled *Boolean `json:"hasWikiEnabled,omitempty"`
	// Indicates if the repository should have the issues feature enabled. (Optional.)
	HasIssuesEnabled *Boolean `json:"hasIssuesEnabled,omitempty"`
	// Indicates if the repository should have the project boards feature enabled. (Optional.)
	HasProjectsEnabled *Boolean `json:"hasProjectsEnabled,omitempty"`
	// Indicates if the repository should have the discussions feature enabled. (Optional.)
	HasDiscussionsEnabled *Boolean `json:"hasDiscussionsEnabled,omitempty"`
	// Indicates if the repository displays a Sponsor button for financial contributions. (Optional.)
	HasSponsorshipsEnabled *Boolean `json:"hasSponsorshipsEnabled,omitempty"`
}

// UpdateRepositoryRulesetInput is an autogenerated input type of UpdateRepositoryRuleset.
type UpdateRepositoryRulesetInput struct {
	// The global relay id of the repository ruleset to be updated. (Required.)
	RepositoryRulesetID ID `json:"repositoryRulesetId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The name of the ruleset. (Optional.)
	Name *String `json:"name,omitempty"`
	// The target of the ruleset. (Optional.)
	Target *RepositoryRulesetTarget `json:"target,omitempty"`
	// The list of rules for this ruleset. (Optional.)
	Rules *[]RepositoryRuleInput `json:"rules,omitempty"`
	// The list of conditions for this ruleset. (Optional.)
	Conditions *RepositoryRuleConditionsInput `json:"conditions,omitempty"`
	// The enforcement level for this ruleset. (Optional.)
	Enforcement *RuleEnforcement `json:"enforcement,omitempty"`
	// A list of actors that are allowed to bypass rules in this ruleset. (Optional.)
	BypassActors *[]RepositoryRulesetBypassActorInput `json:"bypassActors,omitempty"`
}

// UpdateRepositoryWebCommitSignoffSettingInput is an autogenerated input type of UpdateRepositoryWebCommitSignoffSetting.
type UpdateRepositoryWebCommitSignoffSettingInput struct {
	// The ID of the repository to update. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// Indicates if the repository should require signoff on web-based commits. (Required.)
	WebCommitSignoffRequired Boolean `json:"webCommitSignoffRequired"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateSponsorshipPreferencesInput is an autogenerated input type of UpdateSponsorshipPreferences.
type UpdateSponsorshipPreferencesInput struct {

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. (Optional.)
	SponsorID *ID `json:"sponsorId,omitempty"`
	// The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. (Optional.)
	SponsorLogin *String `json:"sponsorLogin,omitempty"`
	// The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. (Optional.)
	SponsorableID *ID `json:"sponsorableId,omitempty"`
	// The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. (Optional.)
	SponsorableLogin *String `json:"sponsorableLogin,omitempty"`
	// Whether the sponsor should receive email updates from the sponsorable. (Optional.)
	ReceiveEmails *Boolean `json:"receiveEmails,omitempty"`
	// Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. (Optional.)
	PrivacyLevel *SponsorshipPrivacy `json:"privacyLevel,omitempty"`
}

// UpdateSubscriptionInput is an autogenerated input type of UpdateSubscription.
type UpdateSubscriptionInput struct {
	// The Node ID of the subscribable object to modify. (Required.)
	SubscribableID ID `json:"subscribableId"`
	// The new state of the subscription. (Required.)
	State SubscriptionState `json:"state"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateTeamDiscussionCommentInput is an autogenerated input type of UpdateTeamDiscussionComment.
type UpdateTeamDiscussionCommentInput struct {
	// The ID of the comment to modify. (Required.)
	ID ID `json:"id"`
	// The updated text of the comment. (Required.)
	Body String `json:"body"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The current version of the body content. (Optional.)
	BodyVersion *String `json:"bodyVersion,omitempty"`
}

// UpdateTeamDiscussionInput is an autogenerated input type of UpdateTeamDiscussion.
type UpdateTeamDiscussionInput struct {
	// The Node ID of the discussion to modify. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The updated title of the discussion. (Optional.)
	Title *String `json:"title,omitempty"`
	// The updated text of the discussion. (Optional.)
	Body *String `json:"body,omitempty"`
	// The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. (Optional.)
	BodyVersion *String `json:"bodyVersion,omitempty"`
	// If provided, sets the pinned state of the updated discussion. (Optional.)
	Pinned *Boolean `json:"pinned,omitempty"`
}

// UpdateTeamReviewAssignmentInput is an autogenerated input type of UpdateTeamReviewAssignment.
type UpdateTeamReviewAssignmentInput struct {
	// The Node ID of the team to update review assignments of. (Required.)
	ID ID `json:"id"`
	// Turn on or off review assignment. (Required.)
	Enabled Boolean `json:"enabled"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The algorithm to use for review assignment. (Optional.)
	Algorithm *TeamReviewAssignmentAlgorithm `json:"algorithm,omitempty"`
	// The number of team members to assign. (Optional.)
	TeamMemberCount *Int `json:"teamMemberCount,omitempty"`
	// Notify the entire team of the PR if it is delegated. (Optional.)
	NotifyTeam *Boolean `json:"notifyTeam,omitempty"`
	// Remove the team review request when assigning. (Optional.)
	RemoveTeamRequest *Boolean `json:"removeTeamRequest,omitempty"`
	// Include the members of any child teams when assigning. (Optional.)
	IncludeChildTeamMembers *Boolean `json:"includeChildTeamMembers,omitempty"`
	// Count any members whose review has already been requested against the required number of members assigned to review. (Optional.)
	CountMembersAlreadyRequested *Boolean `json:"countMembersAlreadyRequested,omitempty"`
	// An array of team member IDs to exclude. (Optional.)
	ExcludedTeamMemberIDs *[]ID `json:"excludedTeamMemberIds,omitempty"`
}

// UpdateTeamsRepositoryInput is an autogenerated input type of UpdateTeamsRepository.
type UpdateTeamsRepositoryInput struct {
	// Repository ID being granted access to. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// A list of teams being granted access. Limit: 10. (Required.)
	TeamIDs []ID `json:"teamIds"`
	// Permission that should be granted to the teams. (Required.)
	Permission RepositoryPermission `json:"permission"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateTopicsInput is an autogenerated input type of UpdateTopics.
type UpdateTopicsInput struct {
	// The Node ID of the repository. (Required.)
	RepositoryID ID `json:"repositoryId"`
	// An array of topic names. (Required.)
	TopicNames []String `json:"topicNames"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// UpdateUserListInput is an autogenerated input type of UpdateUserList.
type UpdateUserListInput struct {
	// The ID of the list to update. (Required.)
	ListID ID `json:"listId"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The name of the list. (Optional.)
	Name *String `json:"name,omitempty"`
	// A description of the list. (Optional.)
	Description *String `json:"description,omitempty"`
	// Whether or not the list is private. (Optional.)
	IsPrivate *Boolean `json:"isPrivate,omitempty"`
}

// UpdateUserListsForItemInput is an autogenerated input type of UpdateUserListsForItem.
type UpdateUserListsForItemInput struct {
	// The item to add to the list. (Required.)
	ItemID ID `json:"itemId"`
	// The lists to which this item should belong. (Required.)
	ListIDs []ID `json:"listIds"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
	// The suggested lists to create and add this item to. (Optional.)
	SuggestedListIDs *[]ID `json:"suggestedListIds,omitempty"`
}

// UserStatusOrder represents ordering options for user status connections.
type UserStatusOrder struct {
	// The field to order user statuses by. (Required.)
	Field UserStatusOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// VerifiableDomainOrder represents ordering options for verifiable domain connections.
type VerifiableDomainOrder struct {
	// The field to order verifiable domains by. (Required.)
	Field VerifiableDomainOrderField `json:"field"`
	// The ordering direction. (Required.)
	Direction OrderDirection `json:"direction"`
}

// VerifyVerifiableDomainInput is an autogenerated input type of VerifyVerifiableDomain.
type VerifyVerifiableDomainInput struct {
	// The ID of the verifiable domain to verify. (Required.)
	ID ID `json:"id"`

	// A unique identifier for the client performing the mutation. (Optional.)
	ClientMutationID *String `json:"clientMutationId,omitempty"`
}

// WorkflowFileReferenceInput represents a workflow that must run for this rule to pass.
type WorkflowFileReferenceInput struct {
	// The path to the workflow file. (Required.)
	Path String `json:"path"`
	// The ID of the repository where the workflow is defined. (Required.)
	RepositoryID Int `json:"repositoryId"`

	// The ref (branch or tag) of the workflow file to use. (Optional.)
	Ref *String `json:"ref,omitempty"`
	// The commit SHA of the workflow file to use. (Optional.)
	Sha *String `json:"sha,omitempty"`
}

// WorkflowRunOrder represents ways in which lists of workflow runs can be ordered upon return.
type WorkflowRunOrder struct {
	// The field by which to order workflows. (Required.)
	Field WorkflowRunOrderField `json:"field"`
	// The direction in which to order workflow runs by the specified field. (Required.)
	Direction OrderDirection `json:"direction"`
}

// WorkflowsParametersInput represents require all changes made to a targeted branch to pass the specified workflows before they can be merged.
type WorkflowsParametersInput struct {
	// Workflows that must pass for this rule to pass. (Required.)
	Workflows []WorkflowFileReferenceInput `json:"workflows"`
}
